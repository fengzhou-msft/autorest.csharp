// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.Resources
{
    /// <summary> A class representing collection of PolicyAssignment and their operations over a Tenant. </summary>
    public partial class PolicyAssignmentContainer : ContainerBase
    {
        /// <summary> Initializes a new instance of the <see cref="PolicyAssignmentContainer"/> class for mocking. </summary>
        protected PolicyAssignmentContainer()
        {
        }

        /// <summary> Initializes a new instance of PolicyAssignmentContainer class. </summary>
        /// <param name="options"> The options to use. </param>
        /// <param name="credential"> The credential to use. </param>
        /// <param name="baseUri"> The base uri to use. </param>
        /// <param name="pipeline"> The http pipeline policy to use. </param>
        internal PolicyAssignmentContainer(ArmClientOptions options, TokenCredential credential, Uri baseUri, HttpPipeline pipeline) : base(options, credential, baseUri, pipeline)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
        }

        private readonly ClientDiagnostics _clientDiagnostics;

        /// <summary> Represents the REST operations. </summary>
        private PolicyAssignmentsRestOperations _restClient => new PolicyAssignmentsRestOperations(_clientDiagnostics, Pipeline, BaseUri);

        /// <summary> Typed Resource Identifier for the container. </summary>
        public new TenantResourceIdentifier Id => base.Id as TenantResourceIdentifier;

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => ResourceIdentifier.RootResourceIdentifier.ResourceType;

        // Container level operations.

        /// <summary> The operation to create or update a PolicyAssignment. Please note some properties can be set only during creation. </summary>
        /// <param name="policyAssignmentScope"> The scope of the policy assignment. Valid scopes are: management group (format: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos;), subscription (format: &apos;/subscriptions/{subscriptionId}&apos;), resource group (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos;, or resource (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos;. </param>
        /// <param name="policyAssignmentName"> The name of the policy assignment. </param>
        /// <param name="parameters"> Parameters for the policy assignment. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public Response<PolicyAssignment> CreateOrUpdateAtScope(ResourceIdentifier policyAssignmentScope, string policyAssignmentName, PolicyAssignmentData parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.CreateOrUpdateAtScope");
            scope.Start();
            try
            {
                if (policyAssignmentScope == null)
                {
                    throw new ArgumentNullException(nameof(policyAssignmentScope));
                }
                if (policyAssignmentName == null)
                {
                    throw new ArgumentNullException(nameof(policyAssignmentName));
                }
                if (parameters == null)
                {
                    throw new ArgumentNullException(nameof(parameters));
                }

                return StartCreateOrUpdateAtScope(policyAssignmentScope, policyAssignmentName, parameters, cancellationToken: cancellationToken).WaitForCompletion(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The operation to create or update a PolicyAssignment. Please note some properties can be set only during creation. </summary>
        /// <param name="policyAssignmentScope"> The scope of the policy assignment. Valid scopes are: management group (format: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos;), subscription (format: &apos;/subscriptions/{subscriptionId}&apos;), resource group (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos;, or resource (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos;. </param>
        /// <param name="policyAssignmentName"> The name of the policy assignment. </param>
        /// <param name="parameters"> Parameters for the policy assignment. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public async Task<Response<PolicyAssignment>> CreateOrUpdateAtScopeAsync(ResourceIdentifier policyAssignmentScope, string policyAssignmentName, PolicyAssignmentData parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.CreateOrUpdateAtScope");
            scope.Start();
            try
            {
                if (policyAssignmentScope == null)
                {
                    throw new ArgumentNullException(nameof(policyAssignmentScope));
                }
                if (policyAssignmentName == null)
                {
                    throw new ArgumentNullException(nameof(policyAssignmentName));
                }
                if (parameters == null)
                {
                    throw new ArgumentNullException(nameof(parameters));
                }

                var operation = await StartCreateOrUpdateAtScopeAsync(policyAssignmentScope, policyAssignmentName, parameters, cancellationToken: cancellationToken).ConfigureAwait(false);
                return await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The operation to create or update a PolicyAssignment. Please note some properties can be set only during creation. </summary>
        /// <param name="policyAssignmentScope"> The scope of the policy assignment. Valid scopes are: management group (format: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos;), subscription (format: &apos;/subscriptions/{subscriptionId}&apos;), resource group (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos;, or resource (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos;. </param>
        /// <param name="policyAssignmentName"> The name of the policy assignment. </param>
        /// <param name="parameters"> Parameters for the policy assignment. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public PolicyAssignmentsCreateOperation StartCreateOrUpdateAtScope(ResourceIdentifier policyAssignmentScope, string policyAssignmentName, PolicyAssignmentData parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.StartCreateOrUpdateAtScope");
            scope.Start();
            try
            {
                if (policyAssignmentScope == null)
                {
                    throw new ArgumentNullException(nameof(policyAssignmentScope));
                }
                if (policyAssignmentName == null)
                {
                    throw new ArgumentNullException(nameof(policyAssignmentName));
                }
                if (parameters == null)
                {
                    throw new ArgumentNullException(nameof(parameters));
                }

                var originalResponse = _restClient.Create(policyAssignmentScope, policyAssignmentName, parameters, cancellationToken: cancellationToken);
                return new PolicyAssignmentsCreateOperation(this, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The operation to create or update a PolicyAssignment. Please note some properties can be set only during creation. </summary>
        /// <param name="policyAssignmentScope"> The scope of the policy assignment. Valid scopes are: management group (format: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos;), subscription (format: &apos;/subscriptions/{subscriptionId}&apos;), resource group (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos;, or resource (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos;. </param>
        /// <param name="policyAssignmentName"> The name of the policy assignment. </param>
        /// <param name="parameters"> Parameters for the policy assignment. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public async Task<PolicyAssignmentsCreateOperation> StartCreateOrUpdateAtScopeAsync(ResourceIdentifier policyAssignmentScope, string policyAssignmentName, PolicyAssignmentData parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.StartCreateOrUpdateAtScope");
            scope.Start();
            try
            {
                if (policyAssignmentScope == null)
                {
                    throw new ArgumentNullException(nameof(policyAssignmentScope));
                }
                if (policyAssignmentName == null)
                {
                    throw new ArgumentNullException(nameof(policyAssignmentName));
                }
                if (parameters == null)
                {
                    throw new ArgumentNullException(nameof(parameters));
                }

                var originalResponse = await _restClient.CreateAsync(policyAssignmentScope, policyAssignmentName, parameters, cancellationToken: cancellationToken).ConfigureAwait(false);
                return new PolicyAssignmentsCreateOperation(this, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets details for this resource from the service. </summary>
        /// <param name="policyAssignmentScope"> The scope of the policy assignment. Valid scopes are: management group (format: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos;), subscription (format: &apos;/subscriptions/{subscriptionId}&apos;), resource group (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos;, or resource (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos;. </param>
        /// <param name="policyAssignmentName"> The name of the policy assignment to get. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public Response<PolicyAssignment> GetAtScope(ResourceIdentifier policyAssignmentScope, string policyAssignmentName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.GetAtScope");
            scope.Start();
            try
            {
                if (policyAssignmentScope == null)
                {
                    throw new ArgumentNullException(nameof(policyAssignmentScope));
                }
                if (policyAssignmentName == null)
                {
                    throw new ArgumentNullException(nameof(policyAssignmentName));
                }

                var response = _restClient.Get(policyAssignmentScope, policyAssignmentName, cancellationToken: cancellationToken);
                return Response.FromValue(new PolicyAssignment(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets details for this resource from the service. </summary>
        /// <param name="policyAssignmentScope"> The scope of the policy assignment. Valid scopes are: management group (format: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos;), subscription (format: &apos;/subscriptions/{subscriptionId}&apos;), resource group (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos;, or resource (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos;. </param>
        /// <param name="policyAssignmentName"> The name of the policy assignment to get. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public async Task<Response<PolicyAssignment>> GetAtScopeAsync(ResourceIdentifier policyAssignmentScope, string policyAssignmentName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.GetAtScope");
            scope.Start();
            try
            {
                if (policyAssignmentScope == null)
                {
                    throw new ArgumentNullException(nameof(policyAssignmentScope));
                }
                if (policyAssignmentName == null)
                {
                    throw new ArgumentNullException(nameof(policyAssignmentName));
                }

                var response = await _restClient.GetAsync(policyAssignmentScope, policyAssignmentName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new PolicyAssignment(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The operation to create or update a PolicyAssignment by ID. Please note some properties can be set only during creation. </summary>
        /// <param name="policyAssignmentId"> The ID of the policy assignment to create. Use the format &apos;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&apos;. </param>
        /// <param name="parameters"> Parameters for policy assignment. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public Response<PolicyAssignment> CreateById(ResourceIdentifier policyAssignmentId, PolicyAssignmentData parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.CreateById");
            scope.Start();
            try
            {
                if (policyAssignmentId == null)
                {
                    throw new ArgumentNullException(nameof(policyAssignmentId));
                }
                if (parameters == null)
                {
                    throw new ArgumentNullException(nameof(parameters));
                }

                return StartCreateById(policyAssignmentId, parameters, cancellationToken: cancellationToken).WaitForCompletion(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The operation to create or update a PolicyAssignment by ID. Please note some properties can be set only during creation. </summary>
        /// <param name="policyAssignmentId"> The ID of the policy assignment to create. Use the format &apos;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&apos;. </param>
        /// <param name="parameters"> Parameters for policy assignment. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public async Task<Response<PolicyAssignment>> CreateByIdAsync(ResourceIdentifier policyAssignmentId, PolicyAssignmentData parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.CreateById");
            scope.Start();
            try
            {
                if (policyAssignmentId == null)
                {
                    throw new ArgumentNullException(nameof(policyAssignmentId));
                }
                if (parameters == null)
                {
                    throw new ArgumentNullException(nameof(parameters));
                }

                var operation = await StartCreateByIdAsync(policyAssignmentId, parameters, cancellationToken: cancellationToken).ConfigureAwait(false);
                return await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The operation to create or update a PolicyAssignment by ID. Please note some properties can be set only during creation. </summary>
        /// <param name="policyAssignmentId"> The ID of the policy assignment to create. Use the format &apos;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&apos;. </param>
        /// <param name="parameters"> Parameters for policy assignment. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public PolicyAssignmentsCreateByIdOperation StartCreateById(ResourceIdentifier policyAssignmentId, PolicyAssignmentData parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.StartCreateById");
            scope.Start();
            try
            {
                if (policyAssignmentId == null)
                {
                    throw new ArgumentNullException(nameof(policyAssignmentId));
                }
                if (parameters == null)
                {
                    throw new ArgumentNullException(nameof(parameters));
                }

                var originalResponse = _restClient.CreateById(policyAssignmentId, parameters, cancellationToken: cancellationToken);
                return new PolicyAssignmentsCreateByIdOperation(this, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The operation to create or update a PolicyAssignment by ID. Please note some properties can be set only during creation. </summary>
        /// <param name="policyAssignmentId"> The ID of the policy assignment to create. Use the format &apos;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&apos;. </param>
        /// <param name="parameters"> Parameters for policy assignment. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public async Task<PolicyAssignmentsCreateByIdOperation> StartCreateByIdAsync(ResourceIdentifier policyAssignmentId, PolicyAssignmentData parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.StartCreateById");
            scope.Start();
            try
            {
                if (policyAssignmentId == null)
                {
                    throw new ArgumentNullException(nameof(policyAssignmentId));
                }
                if (parameters == null)
                {
                    throw new ArgumentNullException(nameof(parameters));
                }

                var originalResponse = await _restClient.CreateByIdAsync(policyAssignmentId, parameters, cancellationToken: cancellationToken).ConfigureAwait(false);
                return new PolicyAssignmentsCreateByIdOperation(this, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets details for this resource from the service by ID. </summary>
        /// <param name="policyAssignmentId"> The ID of the policy assignment to get. Use the format &apos;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&apos;. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public Response<PolicyAssignment> GetById(ResourceIdentifier policyAssignmentId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.GetById");
            scope.Start();
            try
            {
                if (policyAssignmentId == null)
                {
                    throw new ArgumentNullException(nameof(policyAssignmentId));
                }

                var response = _restClient.GetById(policyAssignmentId, cancellationToken: cancellationToken);
                return Response.FromValue(new PolicyAssignment(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets details for this resource from the service by ID. </summary>
        /// <param name="policyAssignmentId"> The ID of the policy assignment to get. Use the format &apos;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&apos;. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public async Task<Response<PolicyAssignment>> GetByIdAsync(ResourceIdentifier policyAssignmentId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.GetById");
            scope.Start();
            try
            {
                if (policyAssignmentId == null)
                {
                    throw new ArgumentNullException(nameof(policyAssignmentId));
                }

                var response = await _restClient.GetByIdAsync(policyAssignmentId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new PolicyAssignment(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List resources at the specified scope. </summary>
        /// <param name="policyAssignmentScope"> The scope of the resource. </param>
        /// <param name="filter"> The filter to apply on the operation. Valid values for $filter are: &apos;atScope()&apos;, &apos;atExactScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, no filtering is performed. If $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the given scope. If $filter=policyDefinitionId eq &apos;{value}&apos; is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. </param>
        /// <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PolicyAssignment" /> that may take multiple service requests to iterate over. </returns>
        public Pageable<PolicyAssignment> ListAtScope(ResourceIdentifier policyAssignmentScope, string filter = null, int? top = null, CancellationToken cancellationToken = default)
        {
            Page<PolicyAssignment> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.ListAtScope");
                scope.Start();
                try
                {
                    if (policyAssignmentScope == null)
                    {
                        throw new ArgumentNullException(nameof(policyAssignmentScope));
                    }

                    Response<PolicyAssignmentListResult> response;
                    if (policyAssignmentScope.GetType() == typeof(TenantResourceIdentifier))
                    {
                        if (policyAssignmentScope.ResourceType.Equals("Microsoft.Management/managementGroups", StringComparison.InvariantCultureIgnoreCase))
                        {
                            response = _restClient.ListForManagementGroup(policyAssignmentScope.Name, filter, top, cancellationToken: cancellationToken);
                        }
                        else
                        {
                            throw new ArgumentException($"Invalid scope: {policyAssignmentScope}.", nameof(policyAssignmentScope));
                        }
                    }
                    else if (policyAssignmentScope.GetType() == typeof(SubscriptionResourceIdentifier))
                    {
                        var subscription = policyAssignmentScope as SubscriptionResourceIdentifier;
                        response = _restClient.List(subscription.SubscriptionId, filter, top, cancellationToken: cancellationToken);
                    }
                    else if (policyAssignmentScope.GetType() == typeof(ResourceGroupResourceIdentifier))
                    {
                        var resourceGroupId = policyAssignmentScope as ResourceGroupResourceIdentifier;
                        if (policyAssignmentScope.ResourceType.Equals(ResourceGroupOperations.ResourceType, StringComparison.InvariantCultureIgnoreCase))
                        {
                            response = _restClient.ListForResourceGroup(resourceGroupId.SubscriptionId, resourceGroupId.ResourceGroupName, filter, top, cancellationToken: cancellationToken);
                        }
                        else
                        {
                            var resourceProviderNamespace = resourceGroupId.ResourceType.Namespace;
                            var resourceType = resourceGroupId.ResourceType.Types[s.ResourceType.Types.Count - 1];
                            var resourceName = resourceGroupId.Name;
                            var parent = resourceGroupId.Parent;
                            var parentParts = new List<string>();
                            while (!parent.ResourceType.Equals(ResourceGroupOperations.ResourceType))
                            {
                                parentParts.Insert(0, $"{parent.ResourceType.Types[parent.ResourceType.Types.Count - 1]}/{parent.Name}");
                                parent = parent.Parent;
                            }
                            var parentResourcePath = parentParts.Count > 0 ? string.Join("/", parentParts) : "";
                            response = _restClient.ListForResource(resourceGroupId.SubscriptionId, resourceGroupId.ResourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter, top, cancellationToken: cancellationToken);
                        }
                    }
                    else
                    {
                        throw new ArgumentException($"Invalid scope: {policyAssignmentScope}.", nameof(policyAssignmentScope));
                    }
                    return Page.FromValues(response.Value.Value.Select(value => new PolicyAssignment(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<PolicyAssignment> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.ListAtScope");
                scope.Start();
                try
                {
                    var response = _restClient.ListForResourceGroupNextPage(nextLink, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new PolicyAssignment(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List resources at the specified scope. </summary>
        /// <param name="policyAssignmentScope"> The scope of the resource. </param>
        /// <param name="filter"> The filter to apply on the operation. Valid values for $filter are: &apos;atScope()&apos;, &apos;atExactScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, no filtering is performed. If $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the given scope. If $filter=policyDefinitionId eq &apos;{value}&apos; is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. </param>
        /// <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PolicyAssignment" /> that may take multiple service requests to iterate over. </returns>
        public AsyncPageable<PolicyAssignment> ListAtScopeAsync(ResourceIdentifier policyAssignmentScope, string filter = null, int? top = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<PolicyAssignment>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.ListAtScopeAsync");
                scope.Start();
                try
                {
                    if (policyAssignmentScope == null)
                    {
                        throw new ArgumentNullException(nameof(policyAssignmentScope));
                    }

                    Response<PolicyAssignmentListResult> response;
                    if (policyAssignmentScope.GetType() == typeof(TenantResourceIdentifier))
                    {
                        if (policyAssignmentScope.ResourceType.Equals("Microsoft.Management/managementGroups", StringComparison.InvariantCultureIgnoreCase))
                        {
                            response = await _restClient.ListForManagementGroupAsync(policyAssignmentScope.Name, filter, top, cancellationToken: cancellationToken).ConfigureAwait(false);
                        }
                        else
                        {
                            throw new ArgumentException($"Invalid scope: {policyAssignmentScope}.", nameof(policyAssignmentScope));
                        }
                    }
                    else if (policyAssignmentScope.GetType() == typeof(SubscriptionResourceIdentifier))
                    {
                        var subscription = policyAssignmentScope as SubscriptionResourceIdentifier;
                        response = await _restClient.ListAsync(subscription.SubscriptionId, filter, top, cancellationToken: cancellationToken).ConfigureAwait(false);
                    }
                    else if (policyAssignmentScope.GetType() == typeof(ResourceGroupResourceIdentifier))
                    {
                        var resourceGroupId = policyAssignmentScope as ResourceGroupResourceIdentifier;
                        if (policyAssignmentScope.ResourceType.Equals(ResourceGroupOperations.ResourceType, StringComparison.InvariantCultureIgnoreCase))
                        {
                            response = await _restClient.ListForResourceGroupAsync(resourceGroupId.SubscriptionId, resourceGroupId.ResourceGroupName, filter, top, cancellationToken: cancellationToken).ConfigureAwait(false);
                        }
                        else
                        {
                            var resourceProviderNamespace = resourceGroupId.ResourceType.Namespace;
                            var resourceType = resourceGroupId.ResourceType.Types[s.ResourceType.Types.Count - 1];
                            var resourceName = resourceGroupId.Name;
                            var parent = resourceGroupId.Parent;
                            var parentParts = new List<string>();
                            while (!parent.ResourceType.Equals(ResourceGroupOperations.ResourceType))
                            {
                                parentParts.Insert(0, $"{parent.ResourceType.Types[parent.ResourceType.Types.Count - 1]}/{parent.Name}");
                                parent = parent.Parent;
                            }
                            var parentResourcePath = parentParts.Count > 0 ? string.Join("/", parentParts) : "";
                            response = await _restClient.ListForResourceAsync(resourceGroupId.SubscriptionId, resourceGroupId.ResourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter, top, cancellationToken: cancellationToken).ConfigureAwait(false);
                        }
                    }
                    else
                    {
                        throw new ArgumentException($"Invalid scope: {policyAssignmentScope}.", nameof(policyAssignmentScope));
                    }
                    return Page.FromValues(response.Value.Value.Select(value => new PolicyAssignment(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<PolicyAssignment>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.ListAtScopeAsync");
                scope.Start();
                try
                {
                    var response = await _restClient.ListForResourceGroupNextPageAsync(nextLink, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new PolicyAssignment(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        // Builders.
        // public ArmBuilder<TenantResourceIdentifier, PolicyAssignment, PolicyAssignmentData> Construct() { }
    }
}
