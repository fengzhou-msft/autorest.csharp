// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.Resources
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class ResourcesManagementModelFactory
    {
        /// <summary> Initializes new instance of ErrorResponse class. </summary>
        /// <param name="code"> The error code. </param>
        /// <param name="message"> The error message. </param>
        /// <param name="target"> The error target. </param>
        /// <param name="details"> The error details. </param>
        /// <param name="additionalInfo"> The error additional info. </param>
        /// <returns> A new <see cref="Models.ErrorResponse"/> instance for mocking. </returns>
        public static ErrorResponse ErrorResponse(string code = default, string message = default, string target = default, IReadOnlyList<ErrorResponse> details = default, IReadOnlyList<ErrorAdditionalInfo> additionalInfo = default)
        {
            details ??= new List<ErrorResponse>();
            additionalInfo ??= new List<ErrorAdditionalInfo>();
            return new ErrorResponse(code, message, target, details, additionalInfo);
        }

        /// <summary> Initializes new instance of ErrorAdditionalInfo class. </summary>
        /// <param name="type"> The additional info type. </param>
        /// <param name="info"> The additional info. </param>
        /// <returns> A new <see cref="Models.ErrorAdditionalInfo"/> instance for mocking. </returns>
        public static ErrorAdditionalInfo ErrorAdditionalInfo(string type = default, object info = default)
        {
            return new ErrorAdditionalInfo(type, info);
        }

        /// <summary> Initializes new instance of DeploymentExtended class. </summary>
        /// <param name="id"> The ID of the deployment. </param>
        /// <param name="name"> The name of the deployment. </param>
        /// <param name="type"> The type of the deployment. </param>
        /// <param name="location"> the location of the deployment. </param>
        /// <param name="properties"> Deployment properties. </param>
        /// <param name="tags"> Deployment tags. </param>
        /// <returns> A new <see cref="Models.DeploymentExtended"/> instance for mocking. </returns>
        public static DeploymentExtended DeploymentExtended(string id = default, string name = default, string type = default, string location = default, DeploymentPropertiesExtended properties = default, IReadOnlyDictionary<string, string> tags = default)
        {
            tags ??= new Dictionary<string, string>();
            return new DeploymentExtended(id, name, type, location, properties, tags);
        }

        /// <summary> Initializes new instance of DeploymentPropertiesExtended class. </summary>
        /// <param name="provisioningState"> Denotes the state of provisioning. </param>
        /// <param name="correlationId"> The correlation ID of the deployment. </param>
        /// <param name="timestamp"> The timestamp of the template deployment. </param>
        /// <param name="duration"> The duration of the template deployment. </param>
        /// <param name="outputs"> Key/value pairs that represent deployment output. </param>
        /// <param name="providers"> The list of resource providers needed for the deployment. </param>
        /// <param name="dependencies"> The list of deployment dependencies. </param>
        /// <param name="templateLink"> The URI referencing the template. </param>
        /// <param name="parameters"> Deployment parameters. </param>
        /// <param name="parametersLink"> The URI referencing the parameters. </param>
        /// <param name="mode"> The deployment mode. Possible values are Incremental and Complete. </param>
        /// <param name="debugSetting"> The debug setting of the deployment. </param>
        /// <param name="onErrorDeployment"> The deployment on error behavior. </param>
        /// <param name="templateHash"> The hash produced for the template. </param>
        /// <param name="outputResources"> Array of provisioned resources. </param>
        /// <param name="validatedResources"> Array of validated resources. </param>
        /// <param name="error"> The deployment error. </param>
        /// <returns> A new <see cref="Models.DeploymentPropertiesExtended"/> instance for mocking. </returns>
        public static DeploymentPropertiesExtended DeploymentPropertiesExtended(string provisioningState = default, string correlationId = default, DateTimeOffset? timestamp = default, string duration = default, object outputs = default, IReadOnlyList<Provider> providers = default, IReadOnlyList<Dependency> dependencies = default, TemplateLink templateLink = default, object parameters = default, ParametersLink parametersLink = default, DeploymentMode? mode = default, DebugSetting debugSetting = default, OnErrorDeploymentExtended onErrorDeployment = default, string templateHash = default, IReadOnlyList<ResourceReference> outputResources = default, IReadOnlyList<ResourceReference> validatedResources = default, ErrorResponse error = default)
        {
            providers ??= new List<Provider>();
            dependencies ??= new List<Dependency>();
            outputResources ??= new List<ResourceReference>();
            validatedResources ??= new List<ResourceReference>();
            return new DeploymentPropertiesExtended(provisioningState, correlationId, timestamp, duration, outputs, providers, dependencies, templateLink, parameters, parametersLink, mode, debugSetting, onErrorDeployment, templateHash, outputResources, validatedResources, error);
        }

        /// <summary> Initializes new instance of Provider class. </summary>
        /// <param name="id"> The provider ID. </param>
        /// <param name="namespace"> The namespace of the resource provider. </param>
        /// <param name="registrationState"> The registration state of the resource provider. </param>
        /// <param name="registrationPolicy"> The registration policy of the resource provider. </param>
        /// <param name="resourceTypes"> The collection of provider resource types. </param>
        /// <param name="providerAuthorizationConsentState"> The provider authorization consent state. </param>
        /// <returns> A new <see cref="Models.Provider"/> instance for mocking. </returns>
        public static Provider Provider(string id = default, string @namespace = default, string registrationState = default, string registrationPolicy = default, IReadOnlyList<ProviderResourceType> resourceTypes = default, ProviderAuthorizationConsentState? providerAuthorizationConsentState = default)
        {
            resourceTypes ??= new List<ProviderResourceType>();
            return new Provider(id, @namespace, registrationState, registrationPolicy, resourceTypes, providerAuthorizationConsentState);
        }

        /// <summary> Initializes new instance of ProviderResourceType class. </summary>
        /// <param name="resourceType"> The resource type. </param>
        /// <param name="locations"> The collection of locations where this resource type can be created. </param>
        /// <param name="locationMappings"> The location mappings that are supported by this resource type. </param>
        /// <param name="aliases"> The aliases that are supported by this resource type. </param>
        /// <param name="apiVersions"> The API version. </param>
        /// <param name="defaultApiVersion"> The default API version. </param>
        /// <param name="apiProfiles"> The API profiles for the resource provider. </param>
        /// <param name="capabilities"> The additional capabilities offered by this resource type. </param>
        /// <param name="properties"> The properties. </param>
        /// <returns> A new <see cref="Models.ProviderResourceType"/> instance for mocking. </returns>
        public static ProviderResourceType ProviderResourceType(string resourceType = default, IReadOnlyList<string> locations = default, IReadOnlyList<ProviderExtendedLocation> locationMappings = default, IReadOnlyList<Alias> aliases = default, IReadOnlyList<string> apiVersions = default, string defaultApiVersion = default, IReadOnlyList<ApiProfile> apiProfiles = default, string capabilities = default, IReadOnlyDictionary<string, string> properties = default)
        {
            locations ??= new List<string>();
            locationMappings ??= new List<ProviderExtendedLocation>();
            aliases ??= new List<Alias>();
            apiVersions ??= new List<string>();
            apiProfiles ??= new List<ApiProfile>();
            properties ??= new Dictionary<string, string>();
            return new ProviderResourceType(resourceType, locations, locationMappings, aliases, apiVersions, defaultApiVersion, apiProfiles, capabilities, properties);
        }

        /// <summary> Initializes new instance of ProviderExtendedLocation class. </summary>
        /// <param name="location"> The azure location. </param>
        /// <param name="type"> The extended location type. </param>
        /// <param name="extendedLocations"> The extended locations for the azure location. </param>
        /// <returns> A new <see cref="Models.ProviderExtendedLocation"/> instance for mocking. </returns>
        public static ProviderExtendedLocation ProviderExtendedLocation(string location = default, string type = default, IReadOnlyList<string> extendedLocations = default)
        {
            extendedLocations ??= new List<string>();
            return new ProviderExtendedLocation(location, type, extendedLocations);
        }

        /// <summary> Initializes new instance of Alias class. </summary>
        /// <param name="name"> The alias name. </param>
        /// <param name="paths"> The paths for an alias. </param>
        /// <param name="type"> The type of the alias. </param>
        /// <param name="defaultPath"> The default path for an alias. </param>
        /// <param name="defaultPattern"> The default pattern for an alias. </param>
        /// <param name="defaultMetadata"> The default alias path metadata. Applies to the default path and to any alias path that doesn&apos;t have metadata. </param>
        /// <returns> A new <see cref="Models.Alias"/> instance for mocking. </returns>
        public static Alias Alias(string name = default, IReadOnlyList<AliasPath> paths = default, AliasType? type = default, string defaultPath = default, AliasPattern defaultPattern = default, AliasPathMetadata defaultMetadata = default)
        {
            paths ??= new List<AliasPath>();
            return new Alias(name, paths, type, defaultPath, defaultPattern, defaultMetadata);
        }

        /// <summary> Initializes new instance of AliasPath class. </summary>
        /// <param name="path"> The path of an alias. </param>
        /// <param name="apiVersions"> The API versions. </param>
        /// <param name="pattern"> The pattern for an alias path. </param>
        /// <param name="metadata"> The metadata of the alias path. If missing, fall back to the default metadata of the alias. </param>
        /// <returns> A new <see cref="Models.AliasPath"/> instance for mocking. </returns>
        public static AliasPath AliasPath(string path = default, IReadOnlyList<string> apiVersions = default, AliasPattern pattern = default, AliasPathMetadata metadata = default)
        {
            apiVersions ??= new List<string>();
            return new AliasPath(path, apiVersions, pattern, metadata);
        }

        /// <summary> Initializes new instance of AliasPattern class. </summary>
        /// <param name="phrase"> The alias pattern phrase. </param>
        /// <param name="variable"> The alias pattern variable. </param>
        /// <param name="type"> The type of alias pattern. </param>
        /// <returns> A new <see cref="Models.AliasPattern"/> instance for mocking. </returns>
        public static AliasPattern AliasPattern(string phrase = default, string variable = default, AliasPatternType? type = default)
        {
            return new AliasPattern(phrase, variable, type);
        }

        /// <summary> Initializes new instance of AliasPathMetadata class. </summary>
        /// <param name="type"> The type of the token that the alias path is referring to. </param>
        /// <param name="attributes"> The attributes of the token that the alias path is referring to. </param>
        /// <returns> A new <see cref="Models.AliasPathMetadata"/> instance for mocking. </returns>
        public static AliasPathMetadata AliasPathMetadata(AliasPathTokenType? type = default, AliasPathAttributes? attributes = default)
        {
            return new AliasPathMetadata(type, attributes);
        }

        /// <summary> Initializes new instance of ApiProfile class. </summary>
        /// <param name="profileVersion"> The profile version. </param>
        /// <param name="apiVersion"> The API version. </param>
        /// <returns> A new <see cref="Models.ApiProfile"/> instance for mocking. </returns>
        public static ApiProfile ApiProfile(string profileVersion = default, string apiVersion = default)
        {
            return new ApiProfile(profileVersion, apiVersion);
        }

        /// <summary> Initializes new instance of Dependency class. </summary>
        /// <param name="dependsOn"> The list of dependencies. </param>
        /// <param name="id"> The ID of the dependency. </param>
        /// <param name="resourceType"> The dependency resource type. </param>
        /// <param name="resourceName"> The dependency resource name. </param>
        /// <returns> A new <see cref="Models.Dependency"/> instance for mocking. </returns>
        public static Dependency Dependency(IReadOnlyList<BasicDependency> dependsOn = default, string id = default, string resourceType = default, string resourceName = default)
        {
            dependsOn ??= new List<BasicDependency>();
            return new Dependency(dependsOn, id, resourceType, resourceName);
        }

        /// <summary> Initializes new instance of BasicDependency class. </summary>
        /// <param name="id"> The ID of the dependency. </param>
        /// <param name="resourceType"> The dependency resource type. </param>
        /// <param name="resourceName"> The dependency resource name. </param>
        /// <returns> A new <see cref="Models.BasicDependency"/> instance for mocking. </returns>
        public static BasicDependency BasicDependency(string id = default, string resourceType = default, string resourceName = default)
        {
            return new BasicDependency(id, resourceType, resourceName);
        }

        /// <summary> Initializes new instance of OnErrorDeploymentExtended class. </summary>
        /// <param name="provisioningState"> The state of the provisioning for the on error deployment. </param>
        /// <param name="type"> The deployment on error behavior type. Possible values are LastSuccessful and SpecificDeployment. </param>
        /// <param name="deploymentName"> The deployment to be used on error case. </param>
        /// <returns> A new <see cref="Models.OnErrorDeploymentExtended"/> instance for mocking. </returns>
        public static OnErrorDeploymentExtended OnErrorDeploymentExtended(string provisioningState = default, OnErrorDeploymentType? type = default, string deploymentName = default)
        {
            return new OnErrorDeploymentExtended(provisioningState, type, deploymentName);
        }

        /// <summary> Initializes new instance of ResourceReference class. </summary>
        /// <param name="id"> The fully qualified resource Id. </param>
        /// <returns> A new <see cref="Models.ResourceReference"/> instance for mocking. </returns>
        public static ResourceReference ResourceReference(string id = default)
        {
            return new ResourceReference(id);
        }

        /// <summary> Initializes new instance of DeploymentValidateResult class. </summary>
        /// <param name="error"> The deployment validation error. </param>
        /// <param name="properties"> The template deployment properties. </param>
        /// <returns> A new <see cref="Models.DeploymentValidateResult"/> instance for mocking. </returns>
        public static DeploymentValidateResult DeploymentValidateResult(ErrorResponse error = default, DeploymentPropertiesExtended properties = default)
        {
            return new DeploymentValidateResult(error, properties);
        }

        /// <summary> Initializes new instance of DeploymentExportResult class. </summary>
        /// <param name="template"> The template content. </param>
        /// <returns> A new <see cref="Models.DeploymentExportResult"/> instance for mocking. </returns>
        public static DeploymentExportResult DeploymentExportResult(object template = default)
        {
            return new DeploymentExportResult(template);
        }

        /// <summary> Initializes new instance of DeploymentListResult class. </summary>
        /// <param name="value"> An array of deployments. </param>
        /// <param name="nextLink"> The URL to use for getting the next set of results. </param>
        /// <returns> A new <see cref="Models.DeploymentListResult"/> instance for mocking. </returns>
        public static DeploymentListResult DeploymentListResult(IReadOnlyList<DeploymentExtended> value = default, string nextLink = default)
        {
            value ??= new List<DeploymentExtended>();
            return new DeploymentListResult(value, nextLink);
        }

        /// <summary> Initializes new instance of WhatIfOperationResult class. </summary>
        /// <param name="status"> Status of the What-If operation. </param>
        /// <param name="error"> Error when What-If operation fails. </param>
        /// <param name="changes"> List of resource changes predicted by What-If operation. </param>
        /// <returns> A new <see cref="Models.WhatIfOperationResult"/> instance for mocking. </returns>
        public static WhatIfOperationResult WhatIfOperationResult(string status = default, ErrorResponse error = default, IReadOnlyList<WhatIfChange> changes = default)
        {
            changes ??= new List<WhatIfChange>();
            return new WhatIfOperationResult(status, error, changes);
        }

        /// <summary> Initializes new instance of WhatIfChange class. </summary>
        /// <param name="resourceId"> Resource ID. </param>
        /// <param name="changeType"> Type of change that will be made to the resource when the deployment is executed. </param>
        /// <param name="unsupportedReason"> The explanation about why the resource is unsupported by What-If. </param>
        /// <param name="before"> The snapshot of the resource before the deployment is executed. </param>
        /// <param name="after"> The predicted snapshot of the resource after the deployment is executed. </param>
        /// <param name="delta"> The predicted changes to resource properties. </param>
        /// <returns> A new <see cref="Models.WhatIfChange"/> instance for mocking. </returns>
        public static WhatIfChange WhatIfChange(string resourceId = default, ChangeType changeType = default, string unsupportedReason = default, object before = default, object after = default, IReadOnlyList<WhatIfPropertyChange> delta = default)
        {
            delta ??= new List<WhatIfPropertyChange>();
            return new WhatIfChange(resourceId, changeType, unsupportedReason, before, after, delta);
        }

        /// <summary> Initializes new instance of WhatIfPropertyChange class. </summary>
        /// <param name="path"> The path of the property. </param>
        /// <param name="propertyChangeType"> The type of property change. </param>
        /// <param name="before"> The value of the property before the deployment is executed. </param>
        /// <param name="after"> The value of the property after the deployment is executed. </param>
        /// <param name="children"> Nested property changes. </param>
        /// <returns> A new <see cref="Models.WhatIfPropertyChange"/> instance for mocking. </returns>
        public static WhatIfPropertyChange WhatIfPropertyChange(string path = default, PropertyChangeType propertyChangeType = default, object before = default, object after = default, IReadOnlyList<WhatIfPropertyChange> children = default)
        {
            children ??= new List<WhatIfPropertyChange>();
            return new WhatIfPropertyChange(path, propertyChangeType, before, after, children);
        }

        /// <summary> Initializes new instance of DeploymentOperation class. </summary>
        /// <param name="id"> Full deployment operation ID. </param>
        /// <param name="operationId"> Deployment operation ID. </param>
        /// <param name="properties"> Deployment properties. </param>
        /// <returns> A new <see cref="Models.DeploymentOperation"/> instance for mocking. </returns>
        public static DeploymentOperation DeploymentOperation(string id = default, string operationId = default, DeploymentOperationProperties properties = default)
        {
            return new DeploymentOperation(id, operationId, properties);
        }

        /// <summary> Initializes new instance of DeploymentOperationProperties class. </summary>
        /// <param name="provisioningOperation"> The name of the current provisioning operation. </param>
        /// <param name="provisioningState"> The state of the provisioning. </param>
        /// <param name="timestamp"> The date and time of the operation. </param>
        /// <param name="duration"> The duration of the operation. </param>
        /// <param name="serviceRequestId"> Deployment operation service request id. </param>
        /// <param name="statusCode"> Operation status code from the resource provider. This property may not be set if a response has not yet been received. </param>
        /// <param name="statusMessage"> Operation status message from the resource provider. This property is optional.  It will only be provided if an error was received from the resource provider. </param>
        /// <param name="targetResource"> The target resource. </param>
        /// <param name="request"> The HTTP request message. </param>
        /// <param name="response"> The HTTP response message. </param>
        /// <returns> A new <see cref="Models.DeploymentOperationProperties"/> instance for mocking. </returns>
        public static DeploymentOperationProperties DeploymentOperationProperties(ProvisioningOperation? provisioningOperation = default, string provisioningState = default, DateTimeOffset? timestamp = default, string duration = default, string serviceRequestId = default, string statusCode = default, object statusMessage = default, TargetResource targetResource = default, HttpMessage request = default, HttpMessage response = default)
        {
            return new DeploymentOperationProperties(provisioningOperation, provisioningState, timestamp, duration, serviceRequestId, statusCode, statusMessage, targetResource, request, response);
        }

        /// <summary> Initializes new instance of StatusMessage class. </summary>
        /// <param name="status"> Status of the deployment operation. </param>
        /// <param name="error"> The error reported by the operation. </param>
        /// <returns> A new <see cref="Models.StatusMessage"/> instance for mocking. </returns>
        public static StatusMessage StatusMessage(string status = default, ErrorResponse error = default)
        {
            return new StatusMessage(status, error);
        }

        /// <summary> Initializes new instance of TargetResource class. </summary>
        /// <param name="id"> The ID of the resource. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. </param>
        /// <returns> A new <see cref="Models.TargetResource"/> instance for mocking. </returns>
        public static TargetResource TargetResource(string id = default, string resourceName = default, string resourceType = default)
        {
            return new TargetResource(id, resourceName, resourceType);
        }

        /// <summary> Initializes new instance of HttpMessage class. </summary>
        /// <param name="content"> HTTP message content. </param>
        /// <returns> A new <see cref="Models.HttpMessage"/> instance for mocking. </returns>
        public static HttpMessage HttpMessage(object content = default)
        {
            return new HttpMessage(content);
        }

        /// <summary> Initializes new instance of DeploymentOperationsListResult class. </summary>
        /// <param name="value"> An array of deployment operations. </param>
        /// <param name="nextLink"> The URL to use for getting the next set of results. </param>
        /// <returns> A new <see cref="Models.DeploymentOperationsListResult"/> instance for mocking. </returns>
        public static DeploymentOperationsListResult DeploymentOperationsListResult(IReadOnlyList<DeploymentOperation> value = default, string nextLink = default)
        {
            value ??= new List<DeploymentOperation>();
            return new DeploymentOperationsListResult(value, nextLink);
        }

        /// <summary> Initializes new instance of TemplateHashResult class. </summary>
        /// <param name="minifiedTemplate"> The minified template string. </param>
        /// <param name="templateHash"> The template hash. </param>
        /// <returns> A new <see cref="Models.TemplateHashResult"/> instance for mocking. </returns>
        public static TemplateHashResult TemplateHashResult(string minifiedTemplate = default, string templateHash = default)
        {
            return new TemplateHashResult(minifiedTemplate, templateHash);
        }

        /// <summary> Initializes new instance of PolicyAssignment class. </summary>
        /// <param name="id"> The ID of the policy assignment. </param>
        /// <param name="type"> The type of the policy assignment. </param>
        /// <param name="name"> The name of the policy assignment. </param>
        /// <param name="sku"> The policy sku. This property is optional, obsolete, and will be ignored. </param>
        /// <param name="location"> The location of the policy assignment. Only required when utilizing managed identity. </param>
        /// <param name="identity"> The managed identity associated with the policy assignment. </param>
        /// <param name="displayName"> The display name of the policy assignment. </param>
        /// <param name="policyDefinitionId"> The ID of the policy definition or policy set definition being assigned. </param>
        /// <param name="scope"> The scope for the policy assignment. </param>
        /// <param name="notScopes"> The policy&apos;s excluded scopes. </param>
        /// <param name="parameters"> The parameter values for the assigned policy rule. The keys are the parameter names. </param>
        /// <param name="description"> This message will be part of response in case of policy violation. </param>
        /// <param name="metadata"> The policy assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs. </param>
        /// <param name="enforcementMode"> The policy assignment enforcement mode. Possible values are Default and DoNotEnforce. </param>
        /// <returns> A new <see cref="Models.PolicyAssignment"/> instance for mocking. </returns>
        public static PolicyAssignment PolicyAssignment(string id = default, string type = default, string name = default, PolicySku sku = default, string location = default, IdentityAutoGenerated identity = default, string displayName = default, string policyDefinitionId = default, string scope = default, IList<string> notScopes = default, IDictionary<string, ParameterValuesValue> parameters = default, string description = default, object metadata = default, EnforcementMode? enforcementMode = default)
        {
            notScopes ??= new List<string>();
            parameters ??= new Dictionary<string, ParameterValuesValue>();
            return new PolicyAssignment(id, type, name, sku, location, identity, displayName, policyDefinitionId, scope, notScopes, parameters, description, metadata, enforcementMode);
        }

        /// <summary> Initializes new instance of Identity class. </summary>
        /// <param name="principalId"> The principal ID of the resource identity. </param>
        /// <param name="tenantId"> The tenant ID of the resource identity. </param>
        /// <param name="type"> The identity type. This is the only required field when adding a system assigned identity to a resource. </param>
        /// <returns> A new <see cref="Models.Identity"/> instance for mocking. </returns>
        public static Identity Identity(string principalId = default, string tenantId = default, ResourceIdentityType? type = default)
        {
            return new Identity(principalId, tenantId, type);
        }

        /// <summary> Initializes new instance of PolicyAssignmentListResult class. </summary>
        /// <param name="value"> An array of policy assignments. </param>
        /// <param name="nextLink"> The URL to use for getting the next set of results. </param>
        /// <returns> A new <see cref="Models.PolicyAssignmentListResult"/> instance for mocking. </returns>
        public static PolicyAssignmentListResult PolicyAssignmentListResult(IReadOnlyList<PolicyAssignment> value = default, string nextLink = default)
        {
            value ??= new List<PolicyAssignment>();
            return new PolicyAssignmentListResult(value, nextLink);
        }

        /// <summary> Initializes new instance of PolicyDefinition class. </summary>
        /// <param name="id"> The ID of the policy definition. </param>
        /// <param name="name"> The name of the policy definition. </param>
        /// <param name="type"> The type of the resource (Microsoft.Authorization/policyDefinitions). </param>
        /// <param name="policyType"> The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static. </param>
        /// <param name="mode"> The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data. </param>
        /// <param name="displayName"> The display name of the policy definition. </param>
        /// <param name="description"> The policy definition description. </param>
        /// <param name="policyRule"> The policy rule. </param>
        /// <param name="metadata"> The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs. </param>
        /// <param name="parameters"> The parameter definitions for parameters used in the policy rule. The keys are the parameter names. </param>
        /// <returns> A new <see cref="Models.PolicyDefinition"/> instance for mocking. </returns>
        public static PolicyDefinition PolicyDefinition(string id = default, string name = default, string type = default, PolicyType? policyType = default, string mode = default, string displayName = default, string description = default, object policyRule = default, object metadata = default, IDictionary<string, ParameterDefinitionsValue> parameters = default)
        {
            parameters ??= new Dictionary<string, ParameterDefinitionsValue>();
            return new PolicyDefinition(id, name, type, policyType, mode, displayName, description, policyRule, metadata, parameters);
        }

        /// <summary> Initializes new instance of PolicyDefinitionListResult class. </summary>
        /// <param name="value"> An array of policy definitions. </param>
        /// <param name="nextLink"> The URL to use for getting the next set of results. </param>
        /// <returns> A new <see cref="Models.PolicyDefinitionListResult"/> instance for mocking. </returns>
        public static PolicyDefinitionListResult PolicyDefinitionListResult(IReadOnlyList<PolicyDefinition> value = default, string nextLink = default)
        {
            value ??= new List<PolicyDefinition>();
            return new PolicyDefinitionListResult(value, nextLink);
        }

        /// <summary> Initializes new instance of PolicySetDefinition class. </summary>
        /// <param name="id"> The ID of the policy set definition. </param>
        /// <param name="name"> The name of the policy set definition. </param>
        /// <param name="type"> The type of the resource (Microsoft.Authorization/policySetDefinitions). </param>
        /// <param name="policyType"> The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static. </param>
        /// <param name="displayName"> The display name of the policy set definition. </param>
        /// <param name="description"> The policy set definition description. </param>
        /// <param name="metadata"> The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs. </param>
        /// <param name="parameters"> The policy set definition parameters that can be used in policy definition references. </param>
        /// <param name="policyDefinitions"> An array of policy definition references. </param>
        /// <param name="policyDefinitionGroups"> The metadata describing groups of policy definition references within the policy set definition. </param>
        /// <returns> A new <see cref="Models.PolicySetDefinition"/> instance for mocking. </returns>
        public static PolicySetDefinition PolicySetDefinition(string id = default, string name = default, string type = default, PolicyType? policyType = default, string displayName = default, string description = default, object metadata = default, IDictionary<string, ParameterDefinitionsValue> parameters = default, IList<PolicyDefinitionReference> policyDefinitions = default, IList<PolicyDefinitionGroup> policyDefinitionGroups = default)
        {
            parameters ??= new Dictionary<string, ParameterDefinitionsValue>();
            policyDefinitions ??= new List<PolicyDefinitionReference>();
            policyDefinitionGroups ??= new List<PolicyDefinitionGroup>();
            return new PolicySetDefinition(id, name, type, policyType, displayName, description, metadata, parameters, policyDefinitions, policyDefinitionGroups);
        }

        /// <summary> Initializes new instance of PolicySetDefinitionListResult class. </summary>
        /// <param name="value"> An array of policy set definitions. </param>
        /// <param name="nextLink"> The URL to use for getting the next set of results. </param>
        /// <returns> A new <see cref="Models.PolicySetDefinitionListResult"/> instance for mocking. </returns>
        public static PolicySetDefinitionListResult PolicySetDefinitionListResult(IReadOnlyList<PolicySetDefinition> value = default, string nextLink = default)
        {
            value ??= new List<PolicySetDefinition>();
            return new PolicySetDefinitionListResult(value, nextLink);
        }

        /// <summary> Initializes new instance of AzureResourceBase class. </summary>
        /// <param name="id"> String Id used to locate any resource on Azure. </param>
        /// <param name="name"> Name of this resource. </param>
        /// <param name="type"> Type of this resource. </param>
        /// <returns> A new <see cref="Models.AzureResourceBase"/> instance for mocking. </returns>
        public static AzureResourceBase AzureResourceBase(string id = default, string name = default, string type = default)
        {
            return new AzureResourceBase(id, name, type);
        }

        /// <summary> Initializes new instance of DeploymentScript class. </summary>
        /// <param name="identity"> Managed identity to be used for this deployment script. Currently, only user-assigned MSI is supported. </param>
        /// <param name="location"> The location of the ACI and the storage account for the deployment script. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="kind"> Type of the script. </param>
        /// <param name="systemData"> The system metadata related to this resource. </param>
        /// <param name="id"> String Id used to locate any resource on Azure. </param>
        /// <param name="name"> Name of this resource. </param>
        /// <param name="type"> Type of this resource. </param>
        /// <returns> A new <see cref="Models.DeploymentScript"/> instance for mocking. </returns>
        public static DeploymentScript DeploymentScript(ManagedServiceIdentity identity = default, string location = default, IDictionary<string, string> tags = default, ScriptType kind = default, SystemData systemData = default, string id = default, string name = default, string type = default)
        {
            tags ??= new Dictionary<string, string>();
            return new DeploymentScript(identity, location, tags, kind, systemData, id, name, type);
        }

        /// <summary> Initializes new instance of ManagedServiceIdentity class. </summary>
        /// <param name="type"> Type of the managed identity. </param>
        /// <param name="tenantId"> ID of the Azure Active Directory. </param>
        /// <param name="userAssignedIdentities"> The list of user-assigned managed identities associated with the resource. Key is the Azure resource Id of the managed identity. </param>
        /// <returns> A new <see cref="Models.ManagedServiceIdentity"/> instance for mocking. </returns>
        public static ManagedServiceIdentity ManagedServiceIdentity(ManagedServiceIdentityType? type = default, string tenantId = default, IDictionary<string, UserAssignedIdentity> userAssignedIdentities = default)
        {
            userAssignedIdentities ??= new Dictionary<string, UserAssignedIdentity>();
            return new ManagedServiceIdentity(type, tenantId, userAssignedIdentities);
        }

        /// <summary> Initializes new instance of UserAssignedIdentity class. </summary>
        /// <param name="principalId"> Azure Active Directory principal ID associated with this identity. </param>
        /// <param name="clientId"> Client App Id associated with this identity. </param>
        /// <returns> A new <see cref="Models.UserAssignedIdentity"/> instance for mocking. </returns>
        public static UserAssignedIdentity UserAssignedIdentity(string principalId = default, string clientId = default)
        {
            return new UserAssignedIdentity(principalId, clientId);
        }

        /// <summary> Initializes new instance of SystemData class. </summary>
        /// <param name="createdBy"> The identity that created the resource. </param>
        /// <param name="createdByType"> The type of identity that created the resource. </param>
        /// <param name="createdAt"> The timestamp of resource creation (UTC). </param>
        /// <param name="lastModifiedBy"> The identity that last modified the resource. </param>
        /// <param name="lastModifiedByType"> The type of identity that last modified the resource. </param>
        /// <param name="lastModifiedAt"> The timestamp of resource last modification (UTC). </param>
        /// <returns> A new <see cref="Models.SystemData"/> instance for mocking. </returns>
        public static SystemData SystemData(string createdBy = default, CreatedByType? createdByType = default, DateTimeOffset? createdAt = default, string lastModifiedBy = default, CreatedByType? lastModifiedByType = default, DateTimeOffset? lastModifiedAt = default)
        {
            return new SystemData(createdBy, createdByType, createdAt, lastModifiedBy, lastModifiedByType, lastModifiedAt);
        }

        /// <summary> Initializes new instance of DeploymentScriptUpdateParameter class. </summary>
        /// <param name="tags"> Resource tags to be updated. </param>
        /// <param name="id"> String Id used to locate any resource on Azure. </param>
        /// <param name="name"> Name of this resource. </param>
        /// <param name="type"> Type of this resource. </param>
        /// <returns> A new <see cref="Models.DeploymentScriptUpdateParameter"/> instance for mocking. </returns>
        public static DeploymentScriptUpdateParameter DeploymentScriptUpdateParameter(IDictionary<string, string> tags = default, string id = default, string name = default, string type = default)
        {
            tags ??= new Dictionary<string, string>();
            return new DeploymentScriptUpdateParameter(tags, id, name, type);
        }

        /// <summary> Initializes new instance of DeploymentScriptListResult class. </summary>
        /// <param name="value"> An array of deployment scripts. </param>
        /// <param name="nextLink"> The URL to use for getting the next set of results. </param>
        /// <returns> A new <see cref="Models.DeploymentScriptListResult"/> instance for mocking. </returns>
        public static DeploymentScriptListResult DeploymentScriptListResult(IReadOnlyList<DeploymentScript> value = default, string nextLink = default)
        {
            value ??= new List<DeploymentScript>();
            return new DeploymentScriptListResult(value, nextLink);
        }

        /// <summary> Initializes new instance of ScriptLogsList class. </summary>
        /// <param name="value"> Deployment scripts logs. </param>
        /// <returns> A new <see cref="Models.ScriptLogsList"/> instance for mocking. </returns>
        public static ScriptLogsList ScriptLogsList(IReadOnlyList<ScriptLog> value = default)
        {
            value ??= new List<ScriptLog>();
            return new ScriptLogsList(value);
        }

        /// <summary> Initializes new instance of ScriptLog class. </summary>
        /// <param name="log"> Script execution logs in text format. </param>
        /// <param name="id"> String Id used to locate any resource on Azure. </param>
        /// <param name="name"> Name of this resource. </param>
        /// <param name="type"> Type of this resource. </param>
        /// <returns> A new <see cref="Models.ScriptLog"/> instance for mocking. </returns>
        public static ScriptLog ScriptLog(string log = default, string id = default, string name = default, string type = default)
        {
            return new ScriptLog(log, id, name, type);
        }

        /// <summary> Initializes new instance of ManagementLockObject class. </summary>
        /// <param name="id"> The resource ID of the lock. </param>
        /// <param name="type"> The resource type of the lock - Microsoft.Authorization/locks. </param>
        /// <param name="name"> The name of the lock. </param>
        /// <param name="level"> The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can&apos;t modify or delete it. </param>
        /// <param name="notes"> Notes about the lock. Maximum of 512 characters. </param>
        /// <param name="owners"> The owners of the lock. </param>
        /// <returns> A new <see cref="Models.ManagementLockObject"/> instance for mocking. </returns>
        public static ManagementLockObject ManagementLockObject(string id = default, string type = default, string name = default, LockLevel level = default, string notes = default, IList<ManagementLockOwner> owners = default)
        {
            owners ??= new List<ManagementLockOwner>();
            return new ManagementLockObject(id, type, name, level, notes, owners);
        }

        /// <summary> Initializes new instance of ManagementLockListResult class. </summary>
        /// <param name="value"> The list of locks. </param>
        /// <param name="nextLink"> The URL to use for getting the next set of results. </param>
        /// <returns> A new <see cref="Models.ManagementLockListResult"/> instance for mocking. </returns>
        public static ManagementLockListResult ManagementLockListResult(IReadOnlyList<ManagementLockObject> value = default, string nextLink = default)
        {
            value ??= new List<ManagementLockObject>();
            return new ManagementLockListResult(value, nextLink);
        }

        /// <summary> Initializes new instance of ResourceLink class. </summary>
        /// <param name="id"> The fully qualified ID of the resource link. </param>
        /// <param name="name"> The name of the resource link. </param>
        /// <param name="type"> The resource link object. </param>
        /// <param name="properties"> Properties for resource link. </param>
        /// <returns> A new <see cref="Models.ResourceLink"/> instance for mocking. </returns>
        public static ResourceLink ResourceLink(string id = default, string name = default, object type = default, ResourceLinkProperties properties = default)
        {
            return new ResourceLink(id, name, type, properties);
        }

        /// <summary> Initializes new instance of ResourceLinkProperties class. </summary>
        /// <param name="sourceId"> The fully qualified ID of the source resource in the link. </param>
        /// <param name="targetId"> The fully qualified ID of the target resource in the link. </param>
        /// <param name="notes"> Notes about the resource link. </param>
        /// <returns> A new <see cref="Models.ResourceLinkProperties"/> instance for mocking. </returns>
        public static ResourceLinkProperties ResourceLinkProperties(string sourceId = default, string targetId = default, string notes = default)
        {
            return new ResourceLinkProperties(sourceId, targetId, notes);
        }

        /// <summary> Initializes new instance of ResourceLinkResult class. </summary>
        /// <param name="value"> An array of resource links. </param>
        /// <param name="nextLink"> The URL to use for getting the next set of results. </param>
        /// <returns> A new <see cref="Models.ResourceLinkResult"/> instance for mocking. </returns>
        public static ResourceLinkResult ResourceLinkResult(IReadOnlyList<ResourceLink> value = default, string nextLink = default)
        {
            value ??= new List<ResourceLink>();
            return new ResourceLinkResult(value, nextLink);
        }

        /// <summary> Initializes new instance of Resource class. </summary>
        /// <param name="id"> Resource ID. </param>
        /// <param name="name"> Resource name. </param>
        /// <param name="type"> Resource type. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <returns> A new <see cref="Models.Resource"/> instance for mocking. </returns>
        public static Resource Resource(string id = default, string name = default, string type = default, string location = default, IDictionary<string, string> tags = default)
        {
            tags ??= new Dictionary<string, string>();
            return new Resource(id, name, type, location, tags);
        }

        /// <summary> Initializes new instance of GenericResource class. </summary>
        /// <param name="managedBy"> ID of the resource that manages this resource. </param>
        /// <param name="sku"> The SKU of the resource. </param>
        /// <param name="identity"> The identity of the resource. </param>
        /// <param name="id"> Resource ID. </param>
        /// <param name="name"> Resource name. </param>
        /// <param name="type"> Resource type. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <returns> A new <see cref="Models.GenericResource"/> instance for mocking. </returns>
        public static GenericResource GenericResource(string managedBy = default, Sku sku = default, Identity identity = default, string id = default, string name = default, string type = default, string location = default, IDictionary<string, string> tags = default)
        {
            tags ??= new Dictionary<string, string>();
            return new GenericResource(managedBy, sku, identity, id, name, type, location, tags);
        }

        /// <summary> Initializes new instance of IdentityAutoGenerated class. </summary>
        /// <param name="principalId"> The principal ID of resource identity. </param>
        /// <param name="tenantId"> The tenant ID of resource. </param>
        /// <param name="type"> The identity type. </param>
        /// <returns> A new <see cref="Models.IdentityAutoGenerated"/> instance for mocking. </returns>
        public static IdentityAutoGenerated IdentityAutoGenerated(string principalId = default, string tenantId = default, ResourceIdentityType? type = default)
        {
            return new IdentityAutoGenerated(principalId, tenantId, type);
        }

        /// <summary> Initializes new instance of Application class. </summary>
        /// <param name="plan"> The plan information. </param>
        /// <param name="kind"> The kind of the managed application. Allowed values are MarketPlace and ServiceCatalog. </param>
        /// <param name="managedResourceGroupId"> The managed resource group Id. </param>
        /// <param name="applicationDefinitionId"> The fully qualified path of managed application definition Id. </param>
        /// <param name="parameters"> Name and value pairs that define the managed application parameters. It can be a JObject or a well formed JSON string. </param>
        /// <param name="outputs"> Name and value pairs that define the managed application outputs. </param>
        /// <param name="provisioningState"> The managed application provisioning state. </param>
        /// <param name="managedBy"> ID of the resource that manages this resource. </param>
        /// <param name="sku"> The SKU of the resource. </param>
        /// <param name="identity"> The identity of the resource. </param>
        /// <param name="id"> Resource ID. </param>
        /// <param name="name"> Resource name. </param>
        /// <param name="type"> Resource type. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <returns> A new <see cref="Models.Application"/> instance for mocking. </returns>
        public static Application Application(PlanAutoGenerated plan = default, string kind = default, string managedResourceGroupId = default, string applicationDefinitionId = default, object parameters = default, object outputs = default, ProvisioningState? provisioningState = default, string managedBy = default, Sku sku = default, IdentityAutoGenerated identity = default, string id = default, string name = default, string type = default, string location = default, IDictionary<string, string> tags = default)
        {
            tags ??= new Dictionary<string, string>();
            return new Application(plan, kind, managedResourceGroupId, applicationDefinitionId, parameters, outputs, provisioningState, managedBy, sku, identity, id, name, type, location, tags);
        }

        /// <summary> Initializes new instance of ApplicationPatchable class. </summary>
        /// <param name="plan"> The plan information. </param>
        /// <param name="kind"> The kind of the managed application. Allowed values are MarketPlace and ServiceCatalog. </param>
        /// <param name="managedResourceGroupId"> The managed resource group Id. </param>
        /// <param name="applicationDefinitionId"> The fully qualified path of managed application definition Id. </param>
        /// <param name="parameters"> Name and value pairs that define the managed application parameters. It can be a JObject or a well formed JSON string. </param>
        /// <param name="outputs"> Name and value pairs that define the managed application outputs. </param>
        /// <param name="provisioningState"> The managed application provisioning state. </param>
        /// <param name="managedBy"> ID of the resource that manages this resource. </param>
        /// <param name="sku"> The SKU of the resource. </param>
        /// <param name="identity"> The identity of the resource. </param>
        /// <param name="id"> Resource ID. </param>
        /// <param name="name"> Resource name. </param>
        /// <param name="type"> Resource type. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <returns> A new <see cref="Models.ApplicationPatchable"/> instance for mocking. </returns>
        public static ApplicationPatchable ApplicationPatchable(PlanPatchable plan = default, string kind = default, string managedResourceGroupId = default, string applicationDefinitionId = default, object parameters = default, object outputs = default, ProvisioningState? provisioningState = default, string managedBy = default, Sku sku = default, IdentityAutoGenerated identity = default, string id = default, string name = default, string type = default, string location = default, IDictionary<string, string> tags = default)
        {
            tags ??= new Dictionary<string, string>();
            return new ApplicationPatchable(plan, kind, managedResourceGroupId, applicationDefinitionId, parameters, outputs, provisioningState, managedBy, sku, identity, id, name, type, location, tags);
        }

        /// <summary> Initializes new instance of ApplicationDefinition class. </summary>
        /// <param name="lockLevel"> The managed application lock level. </param>
        /// <param name="displayName"> The managed application definition display name. </param>
        /// <param name="isEnabled"> A value indicating whether the package is enabled or not. </param>
        /// <param name="authorizations"> The managed application provider authorizations. </param>
        /// <param name="artifacts"> The collection of managed application artifacts. The portal will use the files specified as artifacts to construct the user experience of creating a managed application from a managed application definition. </param>
        /// <param name="description"> The managed application definition description. </param>
        /// <param name="packageFileUri"> The managed application definition package file Uri. Use this element. </param>
        /// <param name="mainTemplate"> The inline main template json which has resources to be provisioned. It can be a JObject or well-formed JSON string. </param>
        /// <param name="createUiDefinition"> The createUiDefinition json for the backing template with Microsoft.Solutions/applications resource. It can be a JObject or well-formed JSON string. </param>
        /// <param name="managedBy"> ID of the resource that manages this resource. </param>
        /// <param name="sku"> The SKU of the resource. </param>
        /// <param name="identity"> The identity of the resource. </param>
        /// <param name="id"> Resource ID. </param>
        /// <param name="name"> Resource name. </param>
        /// <param name="type"> Resource type. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <returns> A new <see cref="Models.ApplicationDefinition"/> instance for mocking. </returns>
        public static ApplicationDefinition ApplicationDefinition(ApplicationLockLevel lockLevel = default, string displayName = default, string isEnabled = default, IList<ApplicationProviderAuthorization> authorizations = default, IList<ApplicationArtifact> artifacts = default, string description = default, string packageFileUri = default, object mainTemplate = default, object createUiDefinition = default, string managedBy = default, Sku sku = default, IdentityAutoGenerated identity = default, string id = default, string name = default, string type = default, string location = default, IDictionary<string, string> tags = default)
        {
            authorizations ??= new List<ApplicationProviderAuthorization>();
            artifacts ??= new List<ApplicationArtifact>();
            tags ??= new Dictionary<string, string>();
            return new ApplicationDefinition(lockLevel, displayName, isEnabled, authorizations, artifacts, description, packageFileUri, mainTemplate, createUiDefinition, managedBy, sku, identity, id, name, type, location, tags);
        }

        /// <summary> Initializes new instance of ApplicationDefinitionListResult class. </summary>
        /// <param name="value"> The array of managed application definitions. </param>
        /// <param name="nextLink"> The URL to use for getting the next set of results. </param>
        /// <returns> A new <see cref="Models.ApplicationDefinitionListResult"/> instance for mocking. </returns>
        public static ApplicationDefinitionListResult ApplicationDefinitionListResult(IReadOnlyList<ApplicationDefinition> value = default, string nextLink = default)
        {
            value ??= new List<ApplicationDefinition>();
            return new ApplicationDefinitionListResult(value, nextLink);
        }

        /// <summary> Initializes new instance of ApplicationListResult class. </summary>
        /// <param name="value"> The array of managed applications. </param>
        /// <param name="nextLink"> The URL to use for getting the next set of results. </param>
        /// <returns> A new <see cref="Models.ApplicationListResult"/> instance for mocking. </returns>
        public static ApplicationListResult ApplicationListResult(IReadOnlyList<Application> value = default, string nextLink = default)
        {
            value ??= new List<Application>();
            return new ApplicationListResult(value, nextLink);
        }

        /// <summary> Initializes new instance of AzurePowerShellScript class. </summary>
        /// <param name="containerSettings"> Container settings. </param>
        /// <param name="storageAccountSettings"> Storage Account settings. </param>
        /// <param name="cleanupPreference"> The clean up preference when the script execution gets in a terminal state. Default setting is &apos;Always&apos;. </param>
        /// <param name="provisioningState"> State of the script execution. This only appears in the response. </param>
        /// <param name="status"> Contains the results of script execution. </param>
        /// <param name="outputs"> List of script outputs. </param>
        /// <param name="primaryScriptUri"> Uri for the script. This is the entry point for the external script. </param>
        /// <param name="supportingScriptUris"> Supporting files for the external script. </param>
        /// <param name="scriptContent"> Script body. </param>
        /// <param name="arguments"> Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location &apos;West US 2&apos;. </param>
        /// <param name="environmentVariables"> The environment variables to pass over to the script. </param>
        /// <param name="forceUpdateTag"> Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID. </param>
        /// <param name="retentionInterval"> Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P1D means one day). </param>
        /// <param name="timeout"> Maximum allowed script execution time specified in ISO 8601 format. Default value is P1D. </param>
        /// <param name="azPowerShellVersion"> Azure PowerShell module version to be used. </param>
        /// <param name="identity"> Managed identity to be used for this deployment script. Currently, only user-assigned MSI is supported. </param>
        /// <param name="location"> The location of the ACI and the storage account for the deployment script. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="kind"> Type of the script. </param>
        /// <param name="systemData"> The system metadata related to this resource. </param>
        /// <param name="id"> String Id used to locate any resource on Azure. </param>
        /// <param name="name"> Name of this resource. </param>
        /// <param name="type"> Type of this resource. </param>
        /// <returns> A new <see cref="Models.AzurePowerShellScript"/> instance for mocking. </returns>
        public static AzurePowerShellScript AzurePowerShellScript(ContainerConfiguration containerSettings = default, StorageAccountConfiguration storageAccountSettings = default, CleanupOptions? cleanupPreference = default, ScriptProvisioningState? provisioningState = default, ScriptStatus status = default, IReadOnlyDictionary<string, object> outputs = default, string primaryScriptUri = default, IList<string> supportingScriptUris = default, string scriptContent = default, string arguments = default, IList<EnvironmentVariable> environmentVariables = default, string forceUpdateTag = default, TimeSpan retentionInterval = default, TimeSpan? timeout = default, string azPowerShellVersion = default, ManagedServiceIdentity identity = default, string location = default, IDictionary<string, string> tags = default, ScriptType kind = default, SystemData systemData = default, string id = default, string name = default, string type = default)
        {
            outputs ??= new Dictionary<string, object>();
            supportingScriptUris ??= new List<string>();
            environmentVariables ??= new List<EnvironmentVariable>();
            tags ??= new Dictionary<string, string>();
            return new AzurePowerShellScript(containerSettings, storageAccountSettings, cleanupPreference, provisioningState, status, outputs, primaryScriptUri, supportingScriptUris, scriptContent, arguments, environmentVariables, forceUpdateTag, retentionInterval, timeout, azPowerShellVersion, identity, location, tags, kind, systemData, id, name, type);
        }

        /// <summary> Initializes new instance of ScriptStatus class. </summary>
        /// <param name="containerInstanceId"> ACI resource Id. </param>
        /// <param name="storageAccountId"> Storage account resource Id. </param>
        /// <param name="startTime"> Start time of the script execution. </param>
        /// <param name="endTime"> End time of the script execution. </param>
        /// <param name="expirationTime"> Time the deployment script resource will expire. </param>
        /// <param name="error"> Error that is relayed from the script execution. </param>
        /// <returns> A new <see cref="Models.ScriptStatus"/> instance for mocking. </returns>
        public static ScriptStatus ScriptStatus(string containerInstanceId = default, string storageAccountId = default, DateTimeOffset? startTime = default, DateTimeOffset? endTime = default, DateTimeOffset? expirationTime = default, ErrorResponse error = default)
        {
            return new ScriptStatus(containerInstanceId, storageAccountId, startTime, endTime, expirationTime, error);
        }

        /// <summary> Initializes new instance of AzureCliScript class. </summary>
        /// <param name="containerSettings"> Container settings. </param>
        /// <param name="storageAccountSettings"> Storage Account settings. </param>
        /// <param name="cleanupPreference"> The clean up preference when the script execution gets in a terminal state. Default setting is &apos;Always&apos;. </param>
        /// <param name="provisioningState"> State of the script execution. This only appears in the response. </param>
        /// <param name="status"> Contains the results of script execution. </param>
        /// <param name="outputs"> List of script outputs. </param>
        /// <param name="primaryScriptUri"> Uri for the script. This is the entry point for the external script. </param>
        /// <param name="supportingScriptUris"> Supporting files for the external script. </param>
        /// <param name="scriptContent"> Script body. </param>
        /// <param name="arguments"> Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location &apos;West US 2&apos;. </param>
        /// <param name="environmentVariables"> The environment variables to pass over to the script. </param>
        /// <param name="forceUpdateTag"> Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID. </param>
        /// <param name="retentionInterval"> Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P1D means one day). </param>
        /// <param name="timeout"> Maximum allowed script execution time specified in ISO 8601 format. Default value is P1D. </param>
        /// <param name="azCliVersion"> Azure CLI module version to be used. </param>
        /// <param name="identity"> Managed identity to be used for this deployment script. Currently, only user-assigned MSI is supported. </param>
        /// <param name="location"> The location of the ACI and the storage account for the deployment script. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="kind"> Type of the script. </param>
        /// <param name="systemData"> The system metadata related to this resource. </param>
        /// <param name="id"> String Id used to locate any resource on Azure. </param>
        /// <param name="name"> Name of this resource. </param>
        /// <param name="type"> Type of this resource. </param>
        /// <returns> A new <see cref="Models.AzureCliScript"/> instance for mocking. </returns>
        public static AzureCliScript AzureCliScript(ContainerConfiguration containerSettings = default, StorageAccountConfiguration storageAccountSettings = default, CleanupOptions? cleanupPreference = default, ScriptProvisioningState? provisioningState = default, ScriptStatus status = default, IReadOnlyDictionary<string, object> outputs = default, string primaryScriptUri = default, IList<string> supportingScriptUris = default, string scriptContent = default, string arguments = default, IList<EnvironmentVariable> environmentVariables = default, string forceUpdateTag = default, TimeSpan retentionInterval = default, TimeSpan? timeout = default, string azCliVersion = default, ManagedServiceIdentity identity = default, string location = default, IDictionary<string, string> tags = default, ScriptType kind = default, SystemData systemData = default, string id = default, string name = default, string type = default)
        {
            outputs ??= new Dictionary<string, object>();
            supportingScriptUris ??= new List<string>();
            environmentVariables ??= new List<EnvironmentVariable>();
            tags ??= new Dictionary<string, string>();
            return new AzureCliScript(containerSettings, storageAccountSettings, cleanupPreference, provisioningState, status, outputs, primaryScriptUri, supportingScriptUris, scriptContent, arguments, environmentVariables, forceUpdateTag, retentionInterval, timeout, azCliVersion, identity, location, tags, kind, systemData, id, name, type);
        }
    }
}
