// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.Resources
{
    /// <summary> A class representing collection of ManagementLockObject and their operations over a ResourceGroup. </summary>
    public partial class ManagementLockObjectContainer : ContainerBase
    {
        /// <summary> Initializes a new instance of the <see cref="ManagementLockObjectContainer"/> class for mocking. </summary>
        protected ManagementLockObjectContainer()
        {
        }

        /// <summary> Initializes a new instance of ManagementLockObjectContainer class. </summary>
        /// <param name="options"> The options to use. </param>
        /// <param name="credential"> The credential to use. </param>
        /// <param name="baseUri"> The base uri to use. </param>
        /// <param name="pipeline"> The http pipeline policy to use. </param>
        internal ManagementLockObjectContainer(ArmClientOptions options, TokenCredential credential, Uri baseUri, HttpPipeline pipeline) : base(options, credential, baseUri, pipeline)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
        }

        private readonly ClientDiagnostics _clientDiagnostics;

        /// <summary> Represents the REST operations. </summary>
        private ManagementLocksRestOperations _restClient => new ManagementLocksRestOperations(_clientDiagnostics, Pipeline, Id.SubscriptionId, BaseUri);

        /// <summary> Typed Resource Identifier for the container. </summary>
        public new ResourceGroupResourceIdentifier Id => base.Id as ResourceGroupResourceIdentifier;

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => ResourceGroupOperations.ResourceType;

        // Container level operations.

        /// <summary> The operation to create or update a ManagementLockObject. Please note some properties can be set only during creation. </summary>
        /// <param name="lockName"> The lock name. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \, ?, /, or any control characters. </param>
        /// <param name="parameters"> The management lock parameters. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public Response<ManagementLockObject> CreateOrUpdateAtScope(string lockName, ManagementLockObjectData parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ManagementLockObjectContainer.CreateOrUpdateAtScope");
            scope.Start();
            try
            {
                if (lockName == null)
                {
                    throw new ArgumentNullException(nameof(lockName));
                }
                if (parameters == null)
                {
                    throw new ArgumentNullException(nameof(parameters));
                }

                return StartCreateOrUpdateAtScope(lockName, parameters, cancellationToken: cancellationToken).WaitForCompletion(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The operation to create or update a ManagementLockObject. Please note some properties can be set only during creation. </summary>
        /// <param name="lockName"> The lock name. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \, ?, /, or any control characters. </param>
        /// <param name="parameters"> The management lock parameters. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public async Task<Response<ManagementLockObject>> CreateOrUpdateAtScopeAsync(string lockName, ManagementLockObjectData parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ManagementLockObjectContainer.CreateOrUpdateAtScope");
            scope.Start();
            try
            {
                if (lockName == null)
                {
                    throw new ArgumentNullException(nameof(lockName));
                }
                if (parameters == null)
                {
                    throw new ArgumentNullException(nameof(parameters));
                }

                var operation = await StartCreateOrUpdateAtScopeAsync(lockName, parameters, cancellationToken: cancellationToken).ConfigureAwait(false);
                return await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The operation to create or update a ManagementLockObject. Please note some properties can be set only during creation. </summary>
        /// <param name="lockName"> The lock name. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \, ?, /, or any control characters. </param>
        /// <param name="parameters"> The management lock parameters. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public ManagementLocksCreateOrUpdateAtResourceGroupLevelOperation StartCreateOrUpdateAtScope(string lockName, ManagementLockObjectData parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ManagementLockObjectContainer.StartCreateOrUpdateAtScope");
            scope.Start();
            try
            {
                if (lockName == null)
                {
                    throw new ArgumentNullException(nameof(lockName));
                }
                if (parameters == null)
                {
                    throw new ArgumentNullException(nameof(parameters));
                }

                var originalResponse = _restClient.CreateOrUpdateAtResourceGroupLevel(Id.ResourceGroupName, lockName, parameters, cancellationToken: cancellationToken);
                return new ManagementLocksCreateOrUpdateAtResourceGroupLevelOperation(this, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The operation to create or update a ManagementLockObject. Please note some properties can be set only during creation. </summary>
        /// <param name="lockName"> The lock name. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \, ?, /, or any control characters. </param>
        /// <param name="parameters"> The management lock parameters. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public async Task<ManagementLocksCreateOrUpdateAtResourceGroupLevelOperation> StartCreateOrUpdateAtScopeAsync(string lockName, ManagementLockObjectData parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ManagementLockObjectContainer.StartCreateOrUpdateAtScope");
            scope.Start();
            try
            {
                if (lockName == null)
                {
                    throw new ArgumentNullException(nameof(lockName));
                }
                if (parameters == null)
                {
                    throw new ArgumentNullException(nameof(parameters));
                }

                var originalResponse = await _restClient.CreateOrUpdateAtResourceGroupLevelAsync(Id.ResourceGroupName, lockName, parameters, cancellationToken: cancellationToken).ConfigureAwait(false);
                return new ManagementLocksCreateOrUpdateAtResourceGroupLevelOperation(this, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets details for this resource from the service. </summary>
        /// <param name="lockName"> The name of the lock to get. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public Response<ManagementLockObject> GetAtScope(string lockName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ManagementLockObjectContainer.GetAtScope");
            scope.Start();
            try
            {
                if (lockName == null)
                {
                    throw new ArgumentNullException(nameof(lockName));
                }

                var response = _restClient.GetAtResourceGroupLevel(Id.ResourceGroupName, lockName, cancellationToken: cancellationToken);
                return Response.FromValue(new ManagementLockObject(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets details for this resource from the service. </summary>
        /// <param name="lockName"> The name of the lock to get. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public async Task<Response<ManagementLockObject>> GetAtScopeAsync(string lockName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ManagementLockObjectContainer.GetAtScope");
            scope.Start();
            try
            {
                if (lockName == null)
                {
                    throw new ArgumentNullException(nameof(lockName));
                }

                var response = await _restClient.GetAtResourceGroupLevelAsync(Id.ResourceGroupName, lockName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new ManagementLockObject(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List resources at the specified scope. </summary>
        /// <param name="managementLockScope"> The scope of the resource. </param>
        /// <param name="filter"> The filter to apply on the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ManagementLockObject" /> that may take multiple service requests to iterate over. </returns>
        public Pageable<ManagementLockObject> ListAtScope(ResourceIdentifier managementLockScope, string filter = null, CancellationToken cancellationToken = default)
        {
            Page<ManagementLockObject> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ManagementLockObjectContainer.ListAtScope");
                scope.Start();
                try
                {
                    if (managementLockScope == null)
                    {
                        throw new ArgumentNullException(nameof(managementLockScope));
                    }

                    Response<ManagementLockListResult> response;
                    if (managementLockScope.GetType() == typeof(SubscriptionResourceIdentifier))
                    {
                        var subscription = managementLockScope as SubscriptionResourceIdentifier;
                        response = _restClient.ListAtSubscriptionLevel(subscription.SubscriptionId, filter, cancellationToken: cancellationToken);
                    }
                    else
                    {
                        throw new ArgumentException($"Invalid scope: {managementLockScope}.", nameof(managementLockScope));
                    }
                    return Page.FromValues(response.Value.Value.Select(value => new ManagementLockObject(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ManagementLockObject> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ManagementLockObjectContainer.ListAtScope");
                scope.Start();
                try
                {
                    var response = _restClient.ListAtResourceGroupLevelNextPage(nextLink, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ManagementLockObject(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List resources at the specified scope. </summary>
        /// <param name="managementLockScope"> The scope of the resource. </param>
        /// <param name="filter"> The filter to apply on the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ManagementLockObject" /> that may take multiple service requests to iterate over. </returns>
        public AsyncPageable<ManagementLockObject> ListAtScopeAsync(ResourceIdentifier managementLockScope, string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<ManagementLockObject>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ManagementLockObjectContainer.ListAtScopeAsync");
                scope.Start();
                try
                {
                    if (managementLockScope == null)
                    {
                        throw new ArgumentNullException(nameof(managementLockScope));
                    }

                    Response<ManagementLockListResult> response;
                    if (managementLockScope.GetType() == typeof(SubscriptionResourceIdentifier))
                    {
                        var subscription = managementLockScope as SubscriptionResourceIdentifier;
                        response = await _restClient.ListAtSubscriptionLevelAsync(subscription.SubscriptionId, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    }
                    else
                    {
                        throw new ArgumentException($"Invalid scope: {managementLockScope}.", nameof(managementLockScope));
                    }
                    return Page.FromValues(response.Value.Value.Select(value => new ManagementLockObject(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ManagementLockObject>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ManagementLockObjectContainer.ListAtScopeAsync");
                scope.Start();
                try
                {
                    var response = await _restClient.ListAtResourceGroupLevelNextPageAsync(nextLink, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ManagementLockObject(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Create or update a management lock by scope. </summary>
        /// <param name="parameters"> Create or update management lock parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameters"/> is null. </exception>
        public virtual async Task<Response<ManagementLockObjectData>> CreateOrUpdateByScopeAsync(ManagementLockObjectData parameters, CancellationToken cancellationToken = default)
        {
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagementLockObjectContainer.CreateOrUpdateByScope");
            scope.Start();
            try
            {
                var response = await _restClient.CreateOrUpdateByScopeAsync(Id.ResourceGroupName, Id.Name, parameters, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update a management lock by scope. </summary>
        /// <param name="parameters"> Create or update management lock parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameters"/> is null. </exception>
        public virtual Response<ManagementLockObjectData> CreateOrUpdateByScope(ManagementLockObjectData parameters, CancellationToken cancellationToken = default)
        {
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagementLockObjectContainer.CreateOrUpdateByScope");
            scope.Start();
            try
            {
                var response = _restClient.CreateOrUpdateByScope(Id.ResourceGroupName, Id.Name, parameters, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> When you apply a lock at a parent scope, all child resources inherit the same lock. To create management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
        /// <param name="parameters"> Parameters for creating or updating a  management lock. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameters"/> is null. </exception>
        public virtual async Task<Response<ManagementLockObjectData>> CreateOrUpdateAtResourceLevelAsync(ManagementLockObjectData parameters, CancellationToken cancellationToken = default)
        {
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagementLockObjectContainer.CreateOrUpdateAtResourceLevel");
            scope.Start();
            try
            {
                var response = await _restClient.CreateOrUpdateAtResourceLevelAsync(Id.ResourceGroupName, Id.Parent.Parent.Parent.Parent, Id.Parent.Parent.Parent, Id.Parent.Parent, Id.Parent, Id.Name, parameters, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> When you apply a lock at a parent scope, all child resources inherit the same lock. To create management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
        /// <param name="parameters"> Parameters for creating or updating a  management lock. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameters"/> is null. </exception>
        public virtual Response<ManagementLockObjectData> CreateOrUpdateAtResourceLevel(ManagementLockObjectData parameters, CancellationToken cancellationToken = default)
        {
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagementLockObjectContainer.CreateOrUpdateAtResourceLevel");
            scope.Start();
            try
            {
                var response = _restClient.CreateOrUpdateAtResourceLevel(Id.ResourceGroupName, Id.Parent.Parent.Parent.Parent, Id.Parent.Parent.Parent, Id.Parent.Parent, Id.Parent, Id.Name, parameters, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> When you apply a lock at a parent scope, all child resources inherit the same lock. To create management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
        /// <param name="parameters"> The management lock parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameters"/> is null. </exception>
        public virtual async Task<Response<ManagementLockObjectData>> CreateOrUpdateAtSubscriptionLevelAsync(ManagementLockObjectData parameters, CancellationToken cancellationToken = default)
        {
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagementLockObjectContainer.CreateOrUpdateAtSubscriptionLevel");
            scope.Start();
            try
            {
                var response = await _restClient.CreateOrUpdateAtSubscriptionLevelAsync(Id.ResourceGroupName, parameters, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> When you apply a lock at a parent scope, all child resources inherit the same lock. To create management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
        /// <param name="parameters"> The management lock parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameters"/> is null. </exception>
        public virtual Response<ManagementLockObjectData> CreateOrUpdateAtSubscriptionLevel(ManagementLockObjectData parameters, CancellationToken cancellationToken = default)
        {
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagementLockObjectContainer.CreateOrUpdateAtSubscriptionLevel");
            scope.Start();
            try
            {
                var response = _restClient.CreateOrUpdateAtSubscriptionLevel(Id.ResourceGroupName, parameters, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // Builders.
        // public ArmBuilder<ResourceGroupResourceIdentifier, ManagementLockObject, ManagementLockObjectData> Construct() { }
    }
}
