// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.Resources
{
    /// <summary> A class representing collection of DeploymentOperation and their operations over a DeploymentExtended. </summary>
    public partial class DeploymentOperationContainer : ContainerBase
    {
        /// <summary> Initializes a new instance of the <see cref="DeploymentOperationContainer"/> class for mocking. </summary>
        protected DeploymentOperationContainer()
        {
        }

        /// <summary> Initializes a new instance of DeploymentOperationContainer class. </summary>
        /// <param name="options"> The options to use. </param>
        /// <param name="credential"> The credential to use. </param>
        /// <param name="baseUri"> The base uri to use. </param>
        /// <param name="pipeline"> The http pipeline policy to use. </param>
        internal DeploymentOperationContainer(ArmClientOptions options, TokenCredential credential, Uri baseUri, HttpPipeline pipeline) : base(options, credential, baseUri, pipeline)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
        }

        private readonly ClientDiagnostics _clientDiagnostics;

        /// <summary> Represents the REST operations. </summary>
        private DeploymentRestOperations _restClient => new DeploymentRestOperations(_clientDiagnostics, Pipeline, BaseUri);

        /// <summary> Typed Resource Identifier for the container. </summary>
        public new TenantResourceIdentifier Id => base.Id as TenantResourceIdentifier;

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => DeploymentExtendedOperations.ResourceType;

        // Container level operations.

        /// <summary> Gets details for this resource from the service. </summary>
        /// <param name="deploymentScope"> The resource scope. </param>
        /// <param name="operationId"> The ID of the operation to get. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public Response<DeploymentOperation> GetAtScope(ResourceIdentifier deploymentScope, string operationId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeploymentOperationContainer.GetAtScope");
            scope.Start();
            try
            {
                if (deploymentScope == null)
                {
                    throw new ArgumentNullException(nameof(deploymentScope));
                }
                if (operationId == null)
                {
                    throw new ArgumentNullException(nameof(operationId));
                }

                var response = _restClient.GetAtScope(deploymentScope, Id.Parent.Name, operationId, cancellationToken: cancellationToken);
                return Response.FromValue(new DeploymentOperation(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets details for this resource from the service. </summary>
        /// <param name="deploymentScope"> The resource scope. </param>
        /// <param name="operationId"> The ID of the operation to get. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public async Task<Response<DeploymentOperation>> GetAtScopeAsync(ResourceIdentifier deploymentScope, string operationId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeploymentOperationContainer.GetAtScope");
            scope.Start();
            try
            {
                if (deploymentScope == null)
                {
                    throw new ArgumentNullException(nameof(deploymentScope));
                }
                if (operationId == null)
                {
                    throw new ArgumentNullException(nameof(operationId));
                }

                var response = await _restClient.GetAtScopeAsync(deploymentScope, Id.Parent.Name, operationId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new DeploymentOperation(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List resources at the specified scope. </summary>
        /// <param name="deploymentScope"> The scope of the resource. </param>
        /// <param name="top"> The number of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DeploymentOperation" /> that may take multiple service requests to iterate over. </returns>
        public Pageable<DeploymentOperation> ListAtScope(ResourceIdentifier deploymentScope, int? top = null, CancellationToken cancellationToken = default)
        {
            Page<DeploymentOperation> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeploymentOperationContainer.ListAtScope");
                scope.Start();
                try
                {
                    if (deploymentScope == null)
                    {
                        throw new ArgumentNullException(nameof(deploymentScope));
                    }

                    var response = _restClient.ListAtScope(deploymentScope, top, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new DeploymentOperation(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<DeploymentOperation> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeploymentOperationContainer.ListAtScope");
                scope.Start();
                try
                {
                    var response = _restClient.ListAtScopeNextPage(nextLink, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new DeploymentOperation(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List resources at the specified scope. </summary>
        /// <param name="deploymentScope"> The scope of the resource. </param>
        /// <param name="top"> The number of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DeploymentOperation" /> that may take multiple service requests to iterate over. </returns>
        public AsyncPageable<DeploymentOperation> ListAtScopeAsync(ResourceIdentifier deploymentScope, int? top = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<DeploymentOperation>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeploymentOperationContainer.ListAtScopeAsync");
                scope.Start();
                try
                {
                    if (deploymentScope == null)
                    {
                        throw new ArgumentNullException(nameof(deploymentScope));
                    }

                    var response = await _restClient.ListAtScopeAsync(deploymentScope, top, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new DeploymentOperation(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<DeploymentOperation>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeploymentOperationContainer.ListAtScopeAsync");
                scope.Start();
                try
                {
                    var response = await _restClient.ListAtScopeNextPageAsync(nextLink, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new DeploymentOperation(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        // Builders.
        // public ArmBuilder<TenantResourceIdentifier, DeploymentOperation, DeploymentOperationData> Construct() { }
    }
}
