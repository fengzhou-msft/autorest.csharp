// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.Resources
{
    /// <summary> A class representing collection of DeploymentExtended and their operations over a Tenant. </summary>
    public partial class DeploymentExtendedContainer : ContainerBase
    {
        /// <summary> Initializes a new instance of the <see cref="DeploymentExtendedContainer"/> class for mocking. </summary>
        protected DeploymentExtendedContainer()
        {
        }

        /// <summary> Initializes a new instance of DeploymentExtendedContainer class. </summary>
        /// <param name="options"> The options to use. </param>
        /// <param name="credential"> The credential to use. </param>
        /// <param name="baseUri"> The base uri to use. </param>
        /// <param name="pipeline"> The http pipeline policy to use. </param>
        internal DeploymentExtendedContainer(ArmClientOptions options, TokenCredential credential, Uri baseUri, HttpPipeline pipeline) : base(options, credential, baseUri, pipeline)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
        }

        private readonly ClientDiagnostics _clientDiagnostics;

        /// <summary> Represents the REST operations. </summary>
        private DeploymentsRestOperations _restClient => new DeploymentsRestOperations(_clientDiagnostics, Pipeline, BaseUri);

        /// <summary> Typed Resource Identifier for the container. </summary>
        public new TenantResourceIdentifier Id => base.Id as TenantResourceIdentifier;

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => ResourceIdentifier.RootResourceIdentifier.ResourceType;

        // Container level operations.

        /// <summary> The operation to create or update a DeploymentExtended. Please note some properties can be set only during creation. </summary>
        /// <param name="deploymentScope"> The resource scope. </param>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="parameters"> Additional parameters supplied to the operation. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public Response<DeploymentExtended> CreateOrUpdateAtScope(ResourceIdentifier deploymentScope, string deploymentName, Deployment parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeploymentExtendedContainer.CreateOrUpdateAtScope");
            scope.Start();
            try
            {
                if (deploymentScope == null)
                {
                    throw new ArgumentNullException(nameof(deploymentScope));
                }
                if (deploymentName == null)
                {
                    throw new ArgumentNullException(nameof(deploymentName));
                }
                if (parameters == null)
                {
                    throw new ArgumentNullException(nameof(parameters));
                }

                return StartCreateOrUpdateAtScope(deploymentScope, deploymentName, parameters, cancellationToken: cancellationToken).WaitForCompletion(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The operation to create or update a DeploymentExtended. Please note some properties can be set only during creation. </summary>
        /// <param name="deploymentScope"> The resource scope. </param>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="parameters"> Additional parameters supplied to the operation. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public async Task<Response<DeploymentExtended>> CreateOrUpdateAtScopeAsync(ResourceIdentifier deploymentScope, string deploymentName, Deployment parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeploymentExtendedContainer.CreateOrUpdateAtScope");
            scope.Start();
            try
            {
                if (deploymentScope == null)
                {
                    throw new ArgumentNullException(nameof(deploymentScope));
                }
                if (deploymentName == null)
                {
                    throw new ArgumentNullException(nameof(deploymentName));
                }
                if (parameters == null)
                {
                    throw new ArgumentNullException(nameof(parameters));
                }

                var operation = await StartCreateOrUpdateAtScopeAsync(deploymentScope, deploymentName, parameters, cancellationToken: cancellationToken).ConfigureAwait(false);
                return await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The operation to create or update a DeploymentExtended. Please note some properties can be set only during creation. </summary>
        /// <param name="deploymentScope"> The resource scope. </param>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="parameters"> Additional parameters supplied to the operation. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public DeploymentsCreateOrUpdateAtScopeOperation StartCreateOrUpdateAtScope(ResourceIdentifier deploymentScope, string deploymentName, Deployment parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeploymentExtendedContainer.StartCreateOrUpdateAtScope");
            scope.Start();
            try
            {
                if (deploymentScope == null)
                {
                    throw new ArgumentNullException(nameof(deploymentScope));
                }
                if (deploymentName == null)
                {
                    throw new ArgumentNullException(nameof(deploymentName));
                }
                if (parameters == null)
                {
                    throw new ArgumentNullException(nameof(parameters));
                }

                var originalResponse = _restClient.CreateOrUpdateAtScope(deploymentScope, deploymentName, parameters, cancellationToken: cancellationToken);
                return new DeploymentsCreateOrUpdateAtScopeOperation(this, _clientDiagnostics, Pipeline, _restClient.CreateCreateOrUpdateAtScopeRequest(deploymentScope, deploymentName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The operation to create or update a DeploymentExtended. Please note some properties can be set only during creation. </summary>
        /// <param name="deploymentScope"> The resource scope. </param>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="parameters"> Additional parameters supplied to the operation. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public async Task<DeploymentsCreateOrUpdateAtScopeOperation> StartCreateOrUpdateAtScopeAsync(ResourceIdentifier deploymentScope, string deploymentName, Deployment parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeploymentExtendedContainer.StartCreateOrUpdateAtScope");
            scope.Start();
            try
            {
                if (deploymentScope == null)
                {
                    throw new ArgumentNullException(nameof(deploymentScope));
                }
                if (deploymentName == null)
                {
                    throw new ArgumentNullException(nameof(deploymentName));
                }
                if (parameters == null)
                {
                    throw new ArgumentNullException(nameof(parameters));
                }

                var originalResponse = await _restClient.CreateOrUpdateAtScopeAsync(deploymentScope, deploymentName, parameters, cancellationToken: cancellationToken).ConfigureAwait(false);
                return new DeploymentsCreateOrUpdateAtScopeOperation(this, _clientDiagnostics, Pipeline, _restClient.CreateCreateOrUpdateAtScopeRequest(deploymentScope, deploymentName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets details for this resource from the service. </summary>
        /// <param name="deploymentScope"> The resource scope. </param>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public Response<DeploymentExtended> GetAtScope(ResourceIdentifier deploymentScope, string deploymentName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeploymentExtendedContainer.GetAtScope");
            scope.Start();
            try
            {
                if (deploymentScope == null)
                {
                    throw new ArgumentNullException(nameof(deploymentScope));
                }
                if (deploymentName == null)
                {
                    throw new ArgumentNullException(nameof(deploymentName));
                }

                var response = _restClient.GetAtScope(deploymentScope, deploymentName, cancellationToken: cancellationToken);
                return Response.FromValue(new DeploymentExtended(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets details for this resource from the service. </summary>
        /// <param name="deploymentScope"> The resource scope. </param>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public async Task<Response<DeploymentExtended>> GetAtScopeAsync(ResourceIdentifier deploymentScope, string deploymentName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeploymentExtendedContainer.GetAtScope");
            scope.Start();
            try
            {
                if (deploymentScope == null)
                {
                    throw new ArgumentNullException(nameof(deploymentScope));
                }
                if (deploymentName == null)
                {
                    throw new ArgumentNullException(nameof(deploymentName));
                }

                var response = await _restClient.GetAtScopeAsync(deploymentScope, deploymentName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new DeploymentExtended(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List resources at the specified scope. </summary>
        /// <param name="deploymentScope"> The scope of the resource. </param>
        /// <param name="filter"> The filter to apply on the operation. For example, you can use $filter=provisioningState eq &apos;{state}&apos;. </param>
        /// <param name="top"> The number of results to get. If null is passed, returns all deployments. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DeploymentExtended" /> that may take multiple service requests to iterate over. </returns>
        public Pageable<DeploymentExtended> ListAtScope(ResourceIdentifier deploymentScope, string filter = null, int? top = null, CancellationToken cancellationToken = default)
        {
            Page<DeploymentExtended> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeploymentExtendedContainer.ListAtScope");
                scope.Start();
                try
                {
                    if (deploymentScope == null)
                    {
                        throw new ArgumentNullException(nameof(deploymentScope));
                    }

                    var response = _restClient.ListAtScope(deploymentScope, filter, top, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new DeploymentExtended(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<DeploymentExtended> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeploymentExtendedContainer.ListAtScope");
                scope.Start();
                try
                {
                    var response = _restClient.ListAtScopeNextPage(nextLink, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new DeploymentExtended(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List resources at the specified scope. </summary>
        /// <param name="deploymentScope"> The scope of the resource. </param>
        /// <param name="filter"> The filter to apply on the operation. For example, you can use $filter=provisioningState eq &apos;{state}&apos;. </param>
        /// <param name="top"> The number of results to get. If null is passed, returns all deployments. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DeploymentExtended" /> that may take multiple service requests to iterate over. </returns>
        public AsyncPageable<DeploymentExtended> ListAtScopeAsync(ResourceIdentifier deploymentScope, string filter = null, int? top = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<DeploymentExtended>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeploymentExtendedContainer.ListAtScopeAsync");
                scope.Start();
                try
                {
                    if (deploymentScope == null)
                    {
                        throw new ArgumentNullException(nameof(deploymentScope));
                    }

                    var response = await _restClient.ListAtScopeAsync(deploymentScope, filter, top, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new DeploymentExtended(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<DeploymentExtended>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeploymentExtendedContainer.ListAtScopeAsync");
                scope.Start();
                try
                {
                    var response = await _restClient.ListAtScopeNextPageAsync(nextLink, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new DeploymentExtended(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        // Builders.
        // public ArmBuilder<TenantResourceIdentifier, DeploymentExtended, DeploymentExtendedData> Construct() { }
    }
}
