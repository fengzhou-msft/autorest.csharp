// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.Resources
{
    /// <summary> A class representing collection of PolicyExemption and their operations over a Tenant. </summary>
    public partial class PolicyExemptionContainer : ContainerBase
    {
        /// <summary> Initializes a new instance of the <see cref="PolicyExemptionContainer"/> class for mocking. </summary>
        protected PolicyExemptionContainer()
        {
        }

        /// <summary> Initializes a new instance of PolicyExemptionContainer class. </summary>
        /// <param name="options"> The options to use. </param>
        /// <param name="credential"> The credential to use. </param>
        /// <param name="baseUri"> The base uri to use. </param>
        /// <param name="pipeline"> The http pipeline policy to use. </param>
        internal PolicyExemptionContainer(ArmClientOptions options, TokenCredential credential, Uri baseUri, HttpPipeline pipeline) : base(options, credential, baseUri, pipeline)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
        }

        private readonly ClientDiagnostics _clientDiagnostics;

        /// <summary> Represents the REST operations. </summary>
        private PolicyExemptionsRestOperations _restClient => new PolicyExemptionsRestOperations(_clientDiagnostics, Pipeline, BaseUri);

        /// <summary> Typed Resource Identifier for the container. </summary>
        public new TenantResourceIdentifier Id => base.Id as TenantResourceIdentifier;

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => ResourceIdentifier.RootResourceIdentifier.ResourceType;

        // Container level operations.

        /// <summary> The operation to create or update a PolicyExemption. Please note some properties can be set only during creation. </summary>
        /// <param name="policyExemptionScope"> The scope of the policy exemption. Valid scopes are: management group (format: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos;), subscription (format: &apos;/subscriptions/{subscriptionId}&apos;), resource group (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos;, or resource (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos;. </param>
        /// <param name="policyExemptionName"> The name of the policy exemption to delete. </param>
        /// <param name="parameters"> Parameters for the policy exemption. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public Response<PolicyExemption> CreateOrUpdateAtScope(ResourceIdentifier policyExemptionScope, string policyExemptionName, PolicyExemptionData parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PolicyExemptionContainer.CreateOrUpdateAtScope");
            scope.Start();
            try
            {
                if (policyExemptionScope == null)
                {
                    throw new ArgumentNullException(nameof(policyExemptionScope));
                }
                if (policyExemptionName == null)
                {
                    throw new ArgumentNullException(nameof(policyExemptionName));
                }
                if (parameters == null)
                {
                    throw new ArgumentNullException(nameof(parameters));
                }

                return StartCreateOrUpdateAtScope(policyExemptionScope, policyExemptionName, parameters, cancellationToken: cancellationToken).WaitForCompletion(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The operation to create or update a PolicyExemption. Please note some properties can be set only during creation. </summary>
        /// <param name="policyExemptionScope"> The scope of the policy exemption. Valid scopes are: management group (format: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos;), subscription (format: &apos;/subscriptions/{subscriptionId}&apos;), resource group (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos;, or resource (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos;. </param>
        /// <param name="policyExemptionName"> The name of the policy exemption to delete. </param>
        /// <param name="parameters"> Parameters for the policy exemption. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public async Task<Response<PolicyExemption>> CreateOrUpdateAtScopeAsync(ResourceIdentifier policyExemptionScope, string policyExemptionName, PolicyExemptionData parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PolicyExemptionContainer.CreateOrUpdateAtScope");
            scope.Start();
            try
            {
                if (policyExemptionScope == null)
                {
                    throw new ArgumentNullException(nameof(policyExemptionScope));
                }
                if (policyExemptionName == null)
                {
                    throw new ArgumentNullException(nameof(policyExemptionName));
                }
                if (parameters == null)
                {
                    throw new ArgumentNullException(nameof(parameters));
                }

                var operation = await StartCreateOrUpdateAtScopeAsync(policyExemptionScope, policyExemptionName, parameters, cancellationToken: cancellationToken).ConfigureAwait(false);
                return await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The operation to create or update a PolicyExemption. Please note some properties can be set only during creation. </summary>
        /// <param name="policyExemptionScope"> The scope of the policy exemption. Valid scopes are: management group (format: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos;), subscription (format: &apos;/subscriptions/{subscriptionId}&apos;), resource group (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos;, or resource (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos;. </param>
        /// <param name="policyExemptionName"> The name of the policy exemption to delete. </param>
        /// <param name="parameters"> Parameters for the policy exemption. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public PolicyExemptionsCreateOrUpdateOperation StartCreateOrUpdateAtScope(ResourceIdentifier policyExemptionScope, string policyExemptionName, PolicyExemptionData parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PolicyExemptionContainer.StartCreateOrUpdateAtScope");
            scope.Start();
            try
            {
                if (policyExemptionScope == null)
                {
                    throw new ArgumentNullException(nameof(policyExemptionScope));
                }
                if (policyExemptionName == null)
                {
                    throw new ArgumentNullException(nameof(policyExemptionName));
                }
                if (parameters == null)
                {
                    throw new ArgumentNullException(nameof(parameters));
                }

                var originalResponse = _restClient.CreateOrUpdate(policyExemptionScope, policyExemptionName, parameters, cancellationToken: cancellationToken);
                return new PolicyExemptionsCreateOrUpdateOperation(this, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The operation to create or update a PolicyExemption. Please note some properties can be set only during creation. </summary>
        /// <param name="policyExemptionScope"> The scope of the policy exemption. Valid scopes are: management group (format: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos;), subscription (format: &apos;/subscriptions/{subscriptionId}&apos;), resource group (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos;, or resource (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos;. </param>
        /// <param name="policyExemptionName"> The name of the policy exemption to delete. </param>
        /// <param name="parameters"> Parameters for the policy exemption. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public async Task<PolicyExemptionsCreateOrUpdateOperation> StartCreateOrUpdateAtScopeAsync(ResourceIdentifier policyExemptionScope, string policyExemptionName, PolicyExemptionData parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PolicyExemptionContainer.StartCreateOrUpdateAtScope");
            scope.Start();
            try
            {
                if (policyExemptionScope == null)
                {
                    throw new ArgumentNullException(nameof(policyExemptionScope));
                }
                if (policyExemptionName == null)
                {
                    throw new ArgumentNullException(nameof(policyExemptionName));
                }
                if (parameters == null)
                {
                    throw new ArgumentNullException(nameof(parameters));
                }

                var originalResponse = await _restClient.CreateOrUpdateAsync(policyExemptionScope, policyExemptionName, parameters, cancellationToken: cancellationToken).ConfigureAwait(false);
                return new PolicyExemptionsCreateOrUpdateOperation(this, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets details for this resource from the service. </summary>
        /// <param name="policyExemptionScope"> The scope of the policy exemption. Valid scopes are: management group (format: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos;), subscription (format: &apos;/subscriptions/{subscriptionId}&apos;), resource group (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos;, or resource (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos;. </param>
        /// <param name="policyExemptionName"> The name of the policy exemption to delete. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public Response<PolicyExemption> GetAtScope(ResourceIdentifier policyExemptionScope, string policyExemptionName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PolicyExemptionContainer.GetAtScope");
            scope.Start();
            try
            {
                if (policyExemptionScope == null)
                {
                    throw new ArgumentNullException(nameof(policyExemptionScope));
                }
                if (policyExemptionName == null)
                {
                    throw new ArgumentNullException(nameof(policyExemptionName));
                }

                var response = _restClient.Get(policyExemptionScope, policyExemptionName, cancellationToken: cancellationToken);
                return Response.FromValue(new PolicyExemption(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets details for this resource from the service. </summary>
        /// <param name="policyExemptionScope"> The scope of the policy exemption. Valid scopes are: management group (format: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos;), subscription (format: &apos;/subscriptions/{subscriptionId}&apos;), resource group (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos;, or resource (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos;. </param>
        /// <param name="policyExemptionName"> The name of the policy exemption to delete. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public async Task<Response<PolicyExemption>> GetAtScopeAsync(ResourceIdentifier policyExemptionScope, string policyExemptionName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PolicyExemptionContainer.GetAtScope");
            scope.Start();
            try
            {
                if (policyExemptionScope == null)
                {
                    throw new ArgumentNullException(nameof(policyExemptionScope));
                }
                if (policyExemptionName == null)
                {
                    throw new ArgumentNullException(nameof(policyExemptionName));
                }

                var response = await _restClient.GetAsync(policyExemptionScope, policyExemptionName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new PolicyExemption(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List resources at the specified scope. </summary>
        /// <param name="policyExemptionScope"> The scope of the resource. </param>
        /// <param name="filter"> The filter to apply on the operation. Valid values for $filter are: &apos;atScope()&apos;, &apos;atExactScope()&apos;, &apos;excludeExpired()&apos; or &apos;policyAssignmentId eq &apos;{value}&apos;&apos;. If $filter is not provided, no filtering is performed. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the scope, including those that apply directly or apply from containing scopes. If $filter=atScope() is provided, the returned list only includes all policy exemptions that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy exemptions that at the given scope. If $filter=excludeExpired() is provided, the returned list only includes all policy exemptions that either haven&apos;t expired or didn&apos;t set expiration date. If $filter=policyAssignmentId eq &apos;{value}&apos; is provided. the returned list only includes all policy exemptions that are associated with the give policyAssignmentId. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PolicyExemption" /> that may take multiple service requests to iterate over. </returns>
        public Pageable<PolicyExemption> ListAtScope(ResourceIdentifier policyExemptionScope, string filter = null, CancellationToken cancellationToken = default)
        {
            Page<PolicyExemption> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PolicyExemptionContainer.ListAtScope");
                scope.Start();
                try
                {
                    if (policyExemptionScope == null)
                    {
                        throw new ArgumentNullException(nameof(policyExemptionScope));
                    }

                    Response<PolicyExemptionListResult> response;
                    if (policyExemptionScope.GetType() == typeof(TenantResourceIdentifier))
                    {
                        if (policyExemptionScope.ResourceType.Equals("Microsoft.Management/managementGroups", StringComparison.InvariantCultureIgnoreCase))
                        {
                            response = _restClient.ListForManagementGroup(policyExemptionScope.Name, filter, cancellationToken: cancellationToken);
                        }
                        else
                        {
                            throw new ArgumentException($"Invalid scope: {policyExemptionScope}.", nameof(policyExemptionScope));
                        }
                    }
                    else if (policyExemptionScope.GetType() == typeof(SubscriptionResourceIdentifier))
                    {
                        var subscription = policyExemptionScope as SubscriptionResourceIdentifier;
                        response = _restClient.List(subscription.SubscriptionId, filter, cancellationToken: cancellationToken);
                    }
                    else if (policyExemptionScope.GetType() == typeof(ResourceGroupResourceIdentifier))
                    {
                        var resourceGroupId = policyExemptionScope as ResourceGroupResourceIdentifier;
                        if (policyExemptionScope.ResourceType.Equals(ResourceGroupOperations.ResourceType, StringComparison.InvariantCultureIgnoreCase))
                        {
                            response = _restClient.ListForResourceGroup(resourceGroupId.SubscriptionId, resourceGroupId.ResourceGroupName, filter, cancellationToken: cancellationToken);
                        }
                        else
                        {
                            var resourceProviderNamespace = resourceGroupId.ResourceType.Namespace;
                            var resourceType = resourceGroupId.ResourceType.Types[s.ResourceType.Types.Count - 1];
                            var resourceName = resourceGroupId.Name;
                            var parent = resourceGroupId.Parent;
                            var parentParts = new List<string>();
                            while (!parent.ResourceType.Equals(ResourceGroupOperations.ResourceType))
                            {
                                parentParts.Insert(0, $"{parent.ResourceType.Types[parent.ResourceType.Types.Count - 1]}/{parent.Name}");
                                parent = parent.Parent;
                            }
                            var parentResourcePath = parentParts.Count > 0 ? string.Join("/", parentParts) : "";
                            response = _restClient.ListForResource(resourceGroupId.SubscriptionId, resourceGroupId.ResourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter, cancellationToken: cancellationToken);
                        }
                    }
                    else
                    {
                        throw new ArgumentException($"Invalid scope: {policyExemptionScope}.", nameof(policyExemptionScope));
                    }
                    return Page.FromValues(response.Value.Value.Select(value => new PolicyExemption(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<PolicyExemption> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PolicyExemptionContainer.ListAtScope");
                scope.Start();
                try
                {
                    var response = _restClient.ListNextPage(nextLink, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new PolicyExemption(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List resources at the specified scope. </summary>
        /// <param name="policyExemptionScope"> The scope of the resource. </param>
        /// <param name="filter"> The filter to apply on the operation. Valid values for $filter are: &apos;atScope()&apos;, &apos;atExactScope()&apos;, &apos;excludeExpired()&apos; or &apos;policyAssignmentId eq &apos;{value}&apos;&apos;. If $filter is not provided, no filtering is performed. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the scope, including those that apply directly or apply from containing scopes. If $filter=atScope() is provided, the returned list only includes all policy exemptions that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy exemptions that at the given scope. If $filter=excludeExpired() is provided, the returned list only includes all policy exemptions that either haven&apos;t expired or didn&apos;t set expiration date. If $filter=policyAssignmentId eq &apos;{value}&apos; is provided. the returned list only includes all policy exemptions that are associated with the give policyAssignmentId. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PolicyExemption" /> that may take multiple service requests to iterate over. </returns>
        public AsyncPageable<PolicyExemption> ListAtScopeAsync(ResourceIdentifier policyExemptionScope, string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<PolicyExemption>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PolicyExemptionContainer.ListAtScopeAsync");
                scope.Start();
                try
                {
                    if (policyExemptionScope == null)
                    {
                        throw new ArgumentNullException(nameof(policyExemptionScope));
                    }

                    Response<PolicyExemptionListResult> response;
                    if (policyExemptionScope.GetType() == typeof(TenantResourceIdentifier))
                    {
                        if (policyExemptionScope.ResourceType.Equals("Microsoft.Management/managementGroups", StringComparison.InvariantCultureIgnoreCase))
                        {
                            response = await _restClient.ListForManagementGroupAsync(policyExemptionScope.Name, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                        }
                        else
                        {
                            throw new ArgumentException($"Invalid scope: {policyExemptionScope}.", nameof(policyExemptionScope));
                        }
                    }
                    else if (policyExemptionScope.GetType() == typeof(SubscriptionResourceIdentifier))
                    {
                        var subscription = policyExemptionScope as SubscriptionResourceIdentifier;
                        response = await _restClient.ListAsync(subscription.SubscriptionId, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    }
                    else if (policyExemptionScope.GetType() == typeof(ResourceGroupResourceIdentifier))
                    {
                        var resourceGroupId = policyExemptionScope as ResourceGroupResourceIdentifier;
                        if (policyExemptionScope.ResourceType.Equals(ResourceGroupOperations.ResourceType, StringComparison.InvariantCultureIgnoreCase))
                        {
                            response = await _restClient.ListForResourceGroupAsync(resourceGroupId.SubscriptionId, resourceGroupId.ResourceGroupName, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                        }
                        else
                        {
                            var resourceProviderNamespace = resourceGroupId.ResourceType.Namespace;
                            var resourceType = resourceGroupId.ResourceType.Types[s.ResourceType.Types.Count - 1];
                            var resourceName = resourceGroupId.Name;
                            var parent = resourceGroupId.Parent;
                            var parentParts = new List<string>();
                            while (!parent.ResourceType.Equals(ResourceGroupOperations.ResourceType))
                            {
                                parentParts.Insert(0, $"{parent.ResourceType.Types[parent.ResourceType.Types.Count - 1]}/{parent.Name}");
                                parent = parent.Parent;
                            }
                            var parentResourcePath = parentParts.Count > 0 ? string.Join("/", parentParts) : "";
                            response = await _restClient.ListForResourceAsync(resourceGroupId.SubscriptionId, resourceGroupId.ResourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                        }
                    }
                    else
                    {
                        throw new ArgumentException($"Invalid scope: {policyExemptionScope}.", nameof(policyExemptionScope));
                    }
                    return Page.FromValues(response.Value.Value.Select(value => new PolicyExemption(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<PolicyExemption>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PolicyExemptionContainer.ListAtScopeAsync");
                scope.Start();
                try
                {
                    var response = await _restClient.ListNextPageAsync(nextLink, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new PolicyExemption(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        // Builders.
        // public ArmBuilder<TenantResourceIdentifier, PolicyExemption, PolicyExemptionData> Construct() { }
    }
}
